// Code generated by go-bindata DO NOT EDIT.
// sources:
// completion.sh
package completion

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _completionSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5b\x7b\x6f\x23\xb7\x11\xff\x5f\x9f\x62\xb2\x12\xe2\xc7\x79\xcf\x76\x9a\x7f\xea\x8b\x8c\x24\xf7\x68\x0f\x4d\x72\xc1\xb9\x69\xd1\xba\x86\x40\xed\xce\x6a\x59\x53\xe4\x82\xe4\x4a\xa7\xb8\xfe\xee\xc5\x90\xdc\x97\x76\xe5\x9c\x51\xe7\x9c\xb6\x16\x70\x38\x89\x8f\xe1\x70\x1e\xbf\x19\xd2\xc3\xf1\x67\xc7\x73\x2e\x8f\xe7\xcc\xe4\xa3\xd1\x18\x66\xb3\x34\x51\x66\xf6\x55\x8e\xa2\x40\x0d\x59\x29\x93\x73\x6a\xf6\xad\x89\xe0\x60\xca\x79\xa2\x96\x4b\x26\xd3\xf3\xd1\x28\x0c\x4f\x71\x5e\x2e\xf6\x0f\xe0\x66\x04\x00\xc0\x33\xb8\xbc\x84\x58\xc2\xe4\xe6\xd5\xcb\x77\x17\xb3\x97\xef\xbe\xff\x71\xf6\xea\xf5\xb7\x3f\xfd\x61\xf6\xe6\xed\x77\xaf\x6f\xe1\xea\xea\x05\xd8\x1c\xa5\x1b\x4d\x1f\x4c\x72\x05\xd1\xe4\xe6\xcd\x4f\x3f\xbc\xfc\xe1\x9b\xef\x5f\x5f\x9e\x5e\xdd\x9e\xc1\xe4\x30\x82\xf3\x73\x6a\x1f\x24\x13\xb9\xe9\x19\x1f\xdd\x12\xe3\x17\x5c\x26\x08\xb3\x05\xda\x59\xa2\x96\xc5\x6c\xad\x74\x6a\x66\xf3\xcd\x4c\x63\x06\xdc\x80\x54\x16\xd8\x8a\x71\xc1\xe6\x02\x81\x4b\xf8\xd9\xe4\xa3\x31\xac\x11\x24\x62\x0a\x0c\x0a\xa5\x2d\xa6\xb0\x42\x6d\xb8\x92\x60\x73\x66\x21\x61\x12\xe6\x08\x46\x95\x3a\xc1\x14\xd6\x39\x4a\x28\x0d\x97\x0b\x9a\xfd\x7c\xd4\xda\xe8\xdf\x2f\xfe\x38\xfb\xcb\xeb\xf7\x17\x6f\xdf\xfd\x70\xf6\xcc\xa0\xa5\x4d\xc2\xe7\x9f\xc3\x67\x60\x37\xc5\x4e\xbe\xce\x8f\x53\x5c\x1d\xcb\x52\x08\xf8\xe2\xfc\xf3\xd3\x20\x95\x1d\x83\x6b\xf9\xd2\x67\x9d\x73\x81\x70\x09\x93\x31\xc4\x0b\x0b\x27\x70\xf5\x02\x52\x55\x77\x57\x9f\x84\x19\x84\x68\x72\x1a\x01\x97\xfd\xce\x52\x1f\xf4\x1a\x5b\x9d\xd3\xc9\x8d\x93\xf9\x5f\xdf\xbd\x7f\x75\x71\xe9\xbe\xbe\xa4\xef\x57\xb7\x3b\x67\xbd\x78\xd1\xeb\x2a\x34\xae\x76\x2f\x43\xbd\xbb\xd6\x89\x4f\xef\xb7\x92\x93\xd6\xee\xa5\x5c\xf7\x74\x3f\xea\xac\xf6\xf5\xd5\x6d\xb4\x7b\xca\xc0\x22\x09\x91\xb9\x43\x6c\xd4\x3d\x9d\x34\x9b\xb8\x0f\xed\x58\xee\x26\x3c\x06\x66\x4c\xb9\x44\xa8\x99\xff\xf6\xfd\xeb\x6f\xfe\x74\x41\xb6\xcd\x84\x46\x96\x6e\xc0\xa0\x05\xc3\x24\x8a\xcd\x4e\x32\x26\xe7\x99\xbd\x0f\x4f\x68\x58\xd2\x6b\xec\x52\x49\x95\xc4\xd1\xed\x28\xe3\x23\x72\xc4\x57\x98\xb1\x52\x58\x98\x63\xce\x56\x5c\x69\xb0\x0a\x16\x68\xc9\xb4\x41\xe2\x07\x0b\x01\x3d\x20\xd3\x6a\xe9\x5a\x93\x52\x6b\x94\x75\xc7\x73\x78\x2b\x7d\x3b\x19\xaf\xca\x20\x8e\x09\x8d\x80\xe6\x2c\xd9\x66\x8e\xa0\x6c\x8e\x1a\x0c\xb7\x25\xb3\x5c\x49\x33\x1a\x93\x43\xd3\x94\xac\xb4\xa5\x46\xef\xbc\x26\x57\xa5\x48\x01\x65\x4a\x94\x0b\x81\x34\xf6\x08\x6c\xce\x0d\x68\xb4\xa5\x96\x06\x4e\x8f\x3c\xb1\x35\x37\x08\x27\xa3\xf1\x68\x0c\xdf\x38\x31\x1b\x60\x30\xa9\x38\x5d\x31\xcd\x1d\x6c\xe0\x07\x6e\xac\xa9\x16\x4b\x98\x10\x84\x05\x89\x92\x96\x36\xe6\x56\x5d\x73\x21\x5c\x0b\xab\x58\x52\xa5\x4c\x5b\xa8\xb9\xb5\xc4\xbd\x88\x73\xd3\x16\x18\xc1\x97\xd2\x29\xcc\x91\x06\xe2\x8a\x89\x92\x11\x84\xd5\x82\xe5\xb2\x28\x2d\x18\xab\xa9\x7f\xdf\x6d\x9c\x1b\x48\x31\xe3\x12\x53\x5a\x28\xc0\xf7\x92\x78\x35\x2a\x48\x4c\xee\x91\xf2\x08\x11\xb5\x9a\x0b\x5c\x1e\x34\x28\xef\x34\x3b\x0b\x1b\x99\x15\x4c\x1b\xac\x51\xa9\x42\xa4\x68\x92\x44\x10\x0b\x4b\x5f\x88\xbd\x68\x0b\x9a\xf8\x34\x9a\xdc\x38\x5f\xbc\x4c\xae\x02\x88\x43\x03\x55\xbc\x07\x55\x5e\xfd\xff\x8a\xf3\xbe\x73\x8c\x29\xd6\x38\xe3\x20\x2f\x80\x4c\xb0\xc5\x11\x24\x6a\xae\x19\x18\xab\x0a\x03\xc4\x22\x6d\x9e\x2f\x97\x98\x72\x66\x51\x6c\x68\xa3\x6b\x0c\x16\x00\x39\x6a\xec\x91\x0d\x7d\xa7\xbd\x8e\x2d\xff\x88\x0f\x0f\xb6\x9b\x0e\xfb\x4c\x06\x71\x4d\x69\x6f\x7d\xff\x1a\x93\x0d\x70\x03\x98\x65\x98\x58\xbe\x22\x0e\x17\x42\xcd\x99\x20\x46\xbd\x49\xb1\x0d\x70\x1f\x8c\x12\xcd\xd6\x02\x6c\xae\x55\xb9\xc8\x9d\x8e\x99\x5e\x94\x4b\x94\xd6\x00\xf3\xc6\x51\x68\xb5\xd0\x6c\x39\xb0\x90\x64\x2b\xbe\x60\x16\x4d\x70\x15\x99\x58\x17\xe9\x34\xa2\x73\x2e\xa3\x88\x17\x67\xc0\x4c\xac\xd9\xc6\x90\x19\xd4\x6e\x5b\x4a\x02\x19\x67\x71\x03\xb4\x59\x66\x29\x5d\xe0\x32\x25\x71\x6f\xfb\xfa\x11\x49\x9c\xcb\x44\x23\xb1\x4a\xab\xcc\x31\x53\x1a\x61\xae\x91\x5d\xd3\x0c\x55\x5a\x72\x75\x9a\x28\x94\x2a\x7a\x2b\xec\xef\x27\xcf\x9e\x1d\xf4\x85\xeb\x08\xdc\xa5\xa7\x0e\x7e\xb5\xa9\x38\xd4\x82\x46\xdb\x27\x94\x47\x04\x4b\xcf\x99\x4c\x05\xba\x18\xac\xb1\x10\x9b\xda\xc8\xdb\xf9\x0e\x44\x0d\xac\x18\x97\xad\x8c\xdc\x18\xa1\x12\x26\x80\x4f\x4f\xfc\xcf\x4c\xe9\x16\xfe\x90\xd7\x45\x93\xaf\xa3\x8e\x4b\x8c\x21\xe3\x82\xe4\x47\x52\x68\x11\x25\x9f\x4a\x72\xe2\x74\xcf\xc2\x92\xd9\x24\xef\xe0\x65\x47\x15\x3e\x17\x99\xb4\x56\x9a\x4e\xc9\x05\x4b\x1d\x1d\xf6\x13\x2e\xbf\x6a\x92\x63\x72\x4d\x33\x1d\xd5\x66\xa6\xca\x32\xd4\x84\x10\x95\x53\x79\x3b\x64\x49\x82\x05\x19\x9a\xac\xad\x2e\x70\xc8\x0d\x2c\x99\xbe\xc6\x14\xe6\x1b\xea\x9e\x6e\x2d\xc4\x33\x30\xea\x08\x18\x98\x82\x25\x58\xa5\x63\x4b\x26\x4b\x26\xc4\x06\x58\x9a\x62\x0a\xc6\x65\x70\xc4\x4a\x69\x50\x3b\x9f\xf8\x50\x60\x42\x88\x66\x15\x8d\x81\xac\xd4\x0e\xf9\x1d\xae\x75\x96\x08\xe0\xd1\xec\x61\x30\xe1\x89\xe3\xc3\xe9\x80\x83\xd2\x87\xa2\xea\xfb\xd7\x3f\x7e\xf7\xb7\x4b\xfe\xec\xd9\xd5\xb4\x43\x6a\x70\xc2\x40\xa8\xbc\x3f\x69\xf8\x28\xda\x1d\x13\xce\x78\x63\xbd\x2e\xf1\x7d\xc9\x84\x30\xde\xdb\x9a\x20\x43\x7a\x50\xa5\x6e\x47\x91\x15\x4a\x67\x54\xcf\x47\x63\xf8\xf3\xbb\x57\xef\xce\x1a\x25\x3a\x73\x77\xc3\x98\x74\xa8\xcf\xe6\x62\x43\xce\x4f\xab\xc0\x92\x1c\x15\x3f\x14\x82\x27\xdc\x8a\x0d\x4d\xa7\x48\xc2\x42\x10\xf3\x31\x4e\x08\xb5\x26\x0a\x55\x34\x33\x3e\x9c\x6d\x47\x33\x93\xa8\xc2\x83\x0d\xd3\x64\x72\x5a\x63\x62\xcf\x46\xe3\x0a\x28\x0c\x71\xa5\xd9\x86\xb0\xa0\xd9\x8d\xf1\x41\xbb\x46\xac\x5c\x89\xd4\x34\x93\xce\x2a\xfb\x75\x3b\xb7\xca\xad\x06\x5c\x5a\xb5\xe5\xcf\x0d\x45\xe7\xd0\xa3\xda\x38\x59\x3d\x7b\xcd\x0c\x2c\xf8\x0a\xe5\x51\xf0\x0e\x1f\x77\x5d\xe8\x25\xbb\x4f\x6c\xc9\x44\x3d\x9a\xfe\xb9\xc5\x1c\x12\x1b\xa3\x12\xee\x23\x70\xe0\xb4\x01\x80\x65\xea\x3d\xff\xa6\xda\x92\xcb\x3c\xbb\x81\x31\x78\xf0\x32\x0d\xae\xeb\x47\x46\xc3\xde\xdb\x45\xa2\xed\x24\xe3\xcc\xd1\x09\x80\x54\x7d\x3c\x30\xb5\x8c\x84\x8c\xa6\x8a\xe6\x5b\x1e\x6b\xd6\xac\x80\x98\x78\xae\x75\x20\x19\xa9\x9b\x76\x33\xeb\x0c\x6e\x08\x4e\xeb\xed\x1d\x1f\xc7\xc7\xb3\xdb\xd1\x1d\x1c\x57\x16\x41\x6a\x6a\x34\x3b\xb9\x11\xcc\xd4\x3c\xdd\xce\x26\x37\x0d\xf5\xdb\xae\xb3\xb4\x99\x9f\xde\x39\xaf\x2b\x84\xd6\xb8\xe9\xa4\x23\x81\xce\x38\x9e\x41\x8a\x89\x20\x33\x8d\x33\x88\x3a\x23\x23\x38\x87\xfa\xe4\x36\xa0\x1b\xfa\x4c\x76\x0a\x17\x85\xe9\xa7\x1c\x5d\xe1\x4c\x6e\xda\xb3\x6f\x21\x55\xe8\x21\xd3\x39\x55\x57\x0e\x01\x10\xaa\x8f\x8f\x66\xbb\xe0\xa2\x72\x08\x7f\xa2\x9d\x15\xa2\x5c\x70\x39\x6b\x85\x9c\x3a\xd2\x91\x9e\x53\xae\x77\xc4\x2b\x73\xcd\x0b\x12\x91\x27\xe0\xf8\xa3\x18\x95\xb3\x15\x7a\x67\xaa\x00\x2e\xe5\xe4\xe1\x4a\x6f\xb6\xcc\x3c\x4e\x61\x42\xe4\x77\x44\x26\x93\xa3\x10\xde\x01\x53\x6e\x08\x50\xa6\x17\x2f\xbf\x38\xf9\xf2\xcb\xad\x71\xa1\xd3\xc0\x9a\x69\x49\xe6\xc4\xe6\x14\x43\xfd\x19\x9d\xb2\x11\xe2\x9f\xb6\x42\x49\x85\xe9\xca\x4d\x51\xbe\xe2\xef\x02\x26\xfb\x6e\x6c\x44\x2c\xb9\xab\x90\x08\x62\x77\x6e\xcf\x20\xe6\x64\xf7\x10\x1d\x3e\x37\x79\x74\x30\x78\xc8\xee\xea\xce\x89\xd6\x63\x6e\x13\xc8\x5d\x4a\x3e\xa1\xe5\xfa\x88\xbf\x63\xb7\xa7\x27\xbf\x3f\x19\x18\x5b\xef\xb8\x35\xa9\xda\x7c\x85\x55\x09\x23\x65\x78\x50\xf6\xd0\xe9\xf5\xdd\x23\xf7\x1c\xa2\x01\xa6\xea\xcc\x68\xd0\x80\xdc\x5e\x59\x69\xf3\xda\x54\x42\xc2\x03\x1d\x3f\xe2\x19\x7c\x06\x77\x1d\x1c\xb6\xf4\xde\xb2\x5b\x3a\x48\x36\x74\x2b\xfc\x99\xee\x47\x82\x1b\x1b\x17\x5a\xad\x78\x8a\xda\x44\x10\x09\xb5\xe0\xd2\xff\xaf\x4a\x1b\x0e\xf2\x7e\x1a\xa5\x2d\x34\xc7\x9f\x1e\xa2\x83\x9a\xab\x4b\x88\x7f\xee\xa0\xeb\x16\x23\x55\x2a\x51\xea\x81\x93\xc8\x40\x88\xdf\x91\x32\x92\x13\x3b\x1e\x1c\xd0\xff\xd2\x49\xe2\x7e\x74\x3b\x31\xe4\xa3\x93\xdf\x01\x09\xef\x0a\x8f\x2e\x15\xae\x15\x3d\x73\x62\xfe\x44\xea\x0e\x7a\x83\x4a\x71\xae\x2b\x8a\xe3\x82\x19\xe3\xee\x56\x7a\x2d\x31\x59\x70\xab\x59\xf3\x15\xb3\x18\x5f\xe3\xa6\xdd\xe8\x8d\xa6\x69\xa1\x1c\x93\x3c\x3b\xb4\x3c\x94\x7d\x0c\xe5\x97\xe3\x90\xc1\x9b\xb2\x28\x94\xb6\x3e\xa3\xae\x93\xaf\x16\x58\x6e\xb0\x7f\x35\xb3\x85\xe7\x3b\xec\xe7\xd7\xb4\xcc\x8f\x35\xa8\x2d\x9b\xe1\xc6\xce\x6a\x5f\xfd\xb4\xc6\x53\xd9\x0e\xe9\xf9\x9f\x46\xc9\x07\xf3\xfe\xff\x5f\xed\xf6\x00\x41\x95\xf6\x71\x94\xfa\xa4\xcb\x07\xd3\x65\x22\x4a\x63\x51\x7f\xfa\x40\xce\xac\x65\x49\x1e\x41\x14\xdc\x94\xc0\x22\x82\x48\xe3\x52\xad\xd0\x7d\x21\x68\x8e\x20\x32\x68\xcb\xe2\x29\xae\x6f\x93\xfe\xcf\xe3\x7a\x50\xfd\xcc\x6b\xe2\xb1\x3c\xb9\xe9\x72\x87\xcb\xe9\x7e\x50\xa7\xbf\x4b\x7e\xfb\xe6\x62\x3a\xd9\xfb\x87\xdc\x03\x77\xf3\x18\x6b\x10\x5c\x22\xa5\xe0\x50\xb1\xef\xa6\x3d\x9b\xee\x47\x13\xea\xf2\xf9\xb9\x44\xf8\x0a\xbe\xda\x27\x76\xab\x71\x40\x06\x06\x71\xec\x8f\xb0\x5f\xb4\x4e\x6f\x9e\x87\x86\xcc\x4d\x87\x72\xeb\xcf\x43\xdd\x24\xff\x8d\x3b\x6f\x57\xd4\x3d\x59\x3a\x51\xbf\x7d\x45\x69\xe9\x10\x95\x27\xd4\x1a\xa6\x7c\x3f\xba\x2d\x79\xde\x41\xf7\x1e\xd8\xe7\xf2\x94\xc7\xcb\x4e\xbc\xfb\x61\xfa\x94\xaa\xfc\x7a\xe1\x6d\xe6\xc3\xca\x23\x2a\x59\x08\xf7\x7f\x29\xeb\x02\x84\x27\x35\xff\x1a\x6a\x26\x74\xf8\xef\x4e\x4a\x7f\x73\x42\x75\x09\xd8\xe3\xc8\xd4\xf5\x44\x71\x9c\xb0\x38\x41\x6d\x4d\x73\x76\xe7\xd2\x60\x52\x6a\xac\x1b\x5a\x07\x79\xfa\xa5\x62\x77\x2f\xd6\x6e\xf0\x17\x95\x4f\xb7\x09\x8f\xee\xdd\xf7\xb5\x43\x25\x33\xbe\xf8\xf4\x27\x14\x83\x74\x20\x31\xb9\x5a\x47\x10\x95\x92\x7e\x3e\x9d\x42\xe0\xc1\x4f\x21\x4e\xbb\x04\x32\x4f\xb0\x3d\xa8\xb7\x7b\xc3\x76\x10\x68\xae\xd6\x4f\x12\x7d\x48\x89\x3a\x08\x78\x12\xe9\x83\x88\xd4\xc7\xe2\x47\xb8\x75\x4a\xd3\xde\x5d\xd3\x13\xa8\xc3\x43\x83\x7a\xf8\xa3\x32\x4b\xd3\xc7\x3b\x72\x95\x45\xca\xec\xc3\x9d\xb2\x7e\x63\xae\xf3\xc8\x97\x16\x0f\x7a\x4f\xf1\x5b\x13\xed\x63\x5e\x16\xfc\xaf\xc9\xb4\x2f\xc5\xe9\xe9\x27\x80\xf9\xd2\xe6\x11\x44\xe1\x04\x4b\xdf\x5c\x08\x6f\xfe\xda\x10\xce\x82\x77\x40\x3f\x59\x79\x78\x08\x52\x29\xc5\x8f\x6b\x0a\x66\xc2\x6a\x07\x5d\x1e\xc2\xd9\x6b\x96\x72\x7d\x8f\xdb\xec\x2d\xaa\x77\xdc\x67\x87\x7a\x9b\x70\x9d\x5d\x97\x66\xf5\x6f\xb4\x3b\xb4\x6e\xb6\x16\xf8\x85\x6b\xed\xb0\x48\x35\xda\x5d\x68\x0f\x51\xf8\xd8\xbb\xfa\xae\x58\xee\xb3\xbb\x30\x2f\xa6\x79\x03\x9b\xec\x32\xff\x63\xcd\xf6\x76\xf1\x11\xc7\x70\x2b\xdf\xe5\xa4\x31\xfa\x5f\xaa\x8a\xda\x39\xd9\xcd\x1e\x83\x54\xed\xb2\xba\xaa\x7e\xd0\x4f\x40\x40\xee\xaa\x56\x9d\x8d\x81\xd2\xed\xc2\xc6\x87\xf1\xf7\xe1\x6b\x02\x5f\xe4\x39\x70\x59\xd0\x92\x90\xe6\x8b\xdc\x82\x54\xeb\x81\xf9\xae\x70\xc8\x55\x9e\x09\x64\x2b\x74\xc5\xc9\xae\xc0\x5c\x59\x94\x96\x93\xd7\x28\x0d\x29\x5a\x4c\xac\x2b\xb7\x72\xfb\x73\x35\x48\x96\x5d\x23\xac\x98\x28\xd1\xc0\xbc\xb4\xae\xd8\xd3\x60\xc1\xb4\xab\x8e\x14\xfc\xba\x5f\x8a\x34\x86\x38\x76\xdc\xb9\x69\xc0\xa5\xb1\x64\x48\xee\xf9\x07\xb5\x4f\x5d\xfb\xc0\xb4\x35\xee\x69\x74\xc5\x71\x6b\xa5\xf5\xa6\x29\x02\xab\x2e\x46\xb6\xee\x44\xc0\xe6\xae\x78\xde\x28\xe0\x76\xcf\x80\x61\x19\x82\x55\xc0\x17\x52\x85\xa7\x23\xbd\x55\x3e\xee\xda\x84\xa0\xa3\xaf\x88\xc7\xbf\x72\x19\x10\x9a\x54\xfd\x8a\x57\x92\x88\x73\x3d\x12\x5e\xa1\x8c\xe1\x73\x81\x3d\x63\xed\xd2\xe1\x92\xfc\x5d\x40\x69\xd8\x02\x8f\x9a\x17\x33\xe1\x11\x81\x51\xee\xf9\x4d\x59\x84\x37\x2a\xed\x07\x0b\x61\x51\xab\xda\xd5\xbb\x47\x4e\x91\xa6\xd4\x38\x78\x7d\x35\x86\x5c\xad\x61\x8d\xb0\x66\xd2\xd2\x54\x2f\x9a\x61\xa5\x3d\x7a\x36\xdc\x3c\xae\xd9\xf1\x7e\x60\xf2\x75\x8d\x20\x3b\x0a\x1e\x7f\xf7\x65\xe8\x0f\x8d\x50\xca\xd2\x60\xeb\x45\x52\x28\xfd\x3b\x72\x0f\xe9\x80\x9b\x6a\x40\xfd\xae\x25\x84\xa6\x52\xfb\x11\xee\xe1\x8d\x7f\xa5\xd6\x29\x85\x0d\xcb\x90\x4e\x3a\xed\x4e\x39\x5a\x29\x4b\xd3\x33\xfe\xc1\xd3\x6c\xd7\xd0\x46\x6e\x4b\x61\x23\x75\xad\x7b\x1d\xfc\xc6\x5b\xb5\xdb\xdd\x57\x4e\x73\x66\xf2\x16\xd0\x43\xc1\x92\x6b\xb6\xc0\xf0\xac\xe0\x2d\xcc\x51\x70\x5c\x21\x2c\x4b\x63\x03\xb9\xb9\x07\x07\x26\x04\xa6\x35\xa8\x88\x8d\x2f\xb1\x74\xcf\x58\x9d\xa0\x87\xdf\x50\xc6\x12\xa2\xe9\x59\x34\x28\x8f\xd1\x80\x86\x2e\x2c\xd3\xb6\x5b\xcc\x09\x4a\xc2\x1e\x21\xf1\x5e\xa8\xea\x0c\x8f\x99\x0e\xeb\x78\xe0\x28\x90\x05\xd4\x11\x20\x56\x8e\xb3\x90\xe1\xd0\xcf\xd6\x57\xa9\xfc\xab\x88\xf8\x4d\xe7\x3d\x96\x23\xf2\xef\x00\x00\x00\xff\xff\x6d\x41\xcc\x76\x9e\x3b\x00\x00")

func completionShBytes() ([]byte, error) {
	return bindataRead(
		_completionSh,
		"completion.sh",
	)
}

func completionSh() (*asset, error) {
	bytes, err := completionShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "completion.sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"completion.sh": completionSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"completion.sh": &bintree{completionSh, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

