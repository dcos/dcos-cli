// Code generated by go-bindata DO NOT EDIT.
// sources:
// completion.sh
package completion

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _completionSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x59\xdd\x6f\xdb\xc8\x11\x7f\xae\xfe\x8a\x39\x4a\x40\x6c\xc7\x3c\x27\xaf\x76\x65\xe4\x9a\x8f\x22\xc0\xdd\xe5\xd0\xeb\x3d\x14\x86\x21\x2c\x97\x43\x71\xeb\xd5\x2e\xb1\x1f\x94\x55\x43\xff\x7b\x31\xbb\xfc\x94\x68\x5f\x82\xcb\xb9\x0f\x0d\x81\x20\xf2\x7e\xcc\xcc\xce\xfc\xe6\x37\xcb\xe1\xfc\xbb\x8b\x4c\xa8\x8b\x8c\xd9\x72\x36\x9b\xc3\x6a\x95\x73\x6d\x57\x7f\x2d\x51\x56\x68\xa0\xf0\x8a\x5f\xd3\x70\x1c\xe5\x52\x80\xf5\x19\xd7\x9b\x0d\x53\xf9\xf5\x6c\xd6\x2c\xcf\x31\xf3\xeb\x93\x53\x78\x98\x01\x00\x88\x02\x6e\x6e\x20\x55\xb0\x78\x78\xf7\xf6\xd3\xaf\xab\xb7\x9f\x7e\xfa\x65\xf5\xee\xfd\xdf\x7e\xfb\xfb\xea\xc3\xc7\x1f\xdf\xef\xe1\xf6\xf6\x0a\x5c\x89\x2a\xac\xa6\x07\x79\xa9\x21\x59\x3c\x7c\xf8\xed\xe7\xb7\x3f\xff\xf0\xd3\xfb\x9b\xd7\xb7\xfb\x4b\x58\x9c\x25\x70\x7d\x4d\xe3\x93\x62\x92\xb0\xbd\x10\xb3\xfd\x8c\x2c\x7f\x87\x05\xf3\xd2\x41\x86\x25\xab\x85\x36\xe0\x34\xac\xd1\x91\x22\x50\x78\xef\xa0\xb1\x1a\x0a\xa3\x37\x61\x94\x7b\x63\x50\x75\x13\xdf\xc3\x47\x15\xc7\x99\x45\xd0\x05\xa4\x29\x79\x01\x68\xcf\x86\xed\x32\x04\xed\x4a\x34\x60\x85\xf3\xcc\x09\xad\xec\x6c\x0e\x22\x6e\x29\xbc\xf3\x06\xc1\x95\xcc\x81\x2d\xb5\x97\x39\xa0\xca\x49\x72\x25\x91\xd6\x9e\x83\x2b\x85\x05\x83\xce\x1b\x65\xe1\xf5\x79\x14\xb6\x15\x16\xe1\xd5\x6c\x3e\x9b\xc3\x0f\xd6\xfa\x0d\x5a\x60\xb0\x68\x2d\xad\x99\x11\x2c\x93\x08\x78\x2f\xac\xb3\xad\x32\xce\xa4\x14\x6a\x0d\x5c\x2b\x47\x07\x0b\x5a\xb7\x42\xca\x30\xc2\x5a\x93\xb4\x57\xf9\x20\x5a\x07\x2a\xbe\x48\xb8\xb0\x43\x87\xcd\xe6\xb0\xd5\x26\x87\x0c\x69\x21\xd6\x4c\x7a\xe6\x70\xe0\x58\xa1\x2a\xef\xc0\x3a\x43\xf3\x27\xe1\xe0\xc2\x42\x8e\x85\x50\x98\x93\xa2\x06\x36\x1b\xb2\xd5\xea\xc6\x63\xea\x05\x05\x0f\x18\x54\x46\x67\x12\x37\xa7\x3d\xba\x42\x64\x57\xcd\x41\x56\x15\x33\x16\x3b\xb4\x6d\x4b\x21\x11\x6e\x20\x59\xf0\x04\x52\xe9\xe8\x07\x99\x97\xc0\xed\x15\xe4\xba\xc3\x98\x58\x26\x8b\x07\x9a\xb0\x37\xfc\xb6\x01\x0f\x3d\x21\xda\xc9\x42\x24\x20\x7a\x40\xd2\x13\xc3\x7f\x3a\x1a\xa3\x67\x4e\x00\x0f\xc8\x10\x16\x2a\x83\x96\x30\xc4\xc8\xab\x85\x64\xeb\x73\xe0\x3a\x33\x2c\xc6\x43\xac\x95\x36\x08\x58\xa3\xd9\xb9\x92\xbc\xc1\x0a\x47\x10\xd2\x60\x9d\xae\x06\xf8\x38\xd2\x12\x91\x02\xaf\x8f\x26\xae\xae\xc6\x56\x9e\x9d\x1e\x0e\x9d\x1d\xdb\xdc\xb8\x6e\x49\xe7\xbc\x9a\x38\xd1\x82\xd3\x61\xb0\x28\x90\x3b\x51\xa3\xdc\xc1\x5a\xea\x8c\x49\xb2\x34\xc2\x8b\xed\x40\x38\xe0\x4c\x01\x37\x6c\x2b\xc1\x95\x46\xfb\x75\x19\xe2\xcd\xcc\xda\x6f\x50\x39\x4b\x6e\xa0\x81\xca\xe8\xb5\x61\x9b\x09\x45\x8a\xd5\x62\xcd\x1c\xda\x26\x6d\x14\xa7\xd3\x83\x33\x88\x21\xd1\xac\x26\x5b\x82\xf3\x98\xdc\xb2\x9d\x25\x48\x74\x29\xec\x95\x41\x96\x07\xf4\x4d\xc8\x8e\xbe\x2d\x84\xca\xc9\xd3\x87\x79\x7f\x0e\x5b\x42\x26\x37\x48\xa6\x92\x96\x0c\x0b\x8a\x4e\x66\x90\xdd\xd1\x0e\xed\x1d\xa5\x3d\x6d\x94\x5a\x57\x47\x1a\x4e\x4e\xf8\xcb\x97\xa7\xc7\xce\x0d\x02\x9e\x8a\x13\x5a\xc6\x67\x53\x52\x72\xad\x30\xfc\x68\xa2\xfd\x8a\xb8\xac\x41\x7d\xc9\x54\x2e\x91\x40\x5f\x19\xac\xe4\xae\x03\xfc\x90\x73\x21\xe9\x21\x64\x03\x63\xce\xc2\x1a\xa9\x39\x93\x20\x96\xaf\xe2\x9f\x85\x36\x03\xac\x51\x06\x26\x8b\x37\xc9\x28\x3d\xe6\x50\x08\x49\xfe\x23\x2f\x0c\x84\x52\x7e\xf1\x92\x2c\x7d\xe1\x60\xc3\x1c\x2f\x47\xdc\x39\x0a\x45\x24\xfe\xc5\x40\xd3\x72\x49\xe9\xe8\x4d\x72\x76\x4c\xfa\x51\x2b\x2f\x91\xdf\xd1\xce\x20\xb5\xdf\xa9\x8b\x02\x0d\xb1\x45\x9b\x58\x11\x87\x8c\x73\xac\x08\x68\xaa\x43\x5d\x63\xa1\xb0\xb0\x61\xe6\x0e\x73\xc8\x76\x34\xbd\x3c\x50\x24\x0a\xb0\xfa\x1c\x18\xd8\x8a\x71\xa4\xe5\x4a\xd3\x89\x94\x67\x52\xee\x80\xe5\x39\xe6\x60\x85\xe2\x11\x6f\xde\xa2\x09\x39\x71\x5f\x21\x27\x76\x73\x9a\xd6\x40\xe1\x4d\xa8\x02\x81\xe3\x46\x2a\x1a\x22\xe9\xcf\x70\xc4\x28\x10\x58\xe5\x6c\x39\x91\xa0\xf4\x50\x81\xfb\xc7\xfb\x5f\x7e\xfc\xd7\x8d\x78\xf9\xf2\x76\x39\x12\x35\xb9\xe1\xea\x38\x95\xbf\x5c\x34\x7c\x96\xec\x11\x84\x0b\xd1\xa3\x77\x4f\xb5\xf7\x2d\x93\xd2\xc6\x6c\xeb\x0b\x0e\xc5\x41\x7b\x33\xac\x28\x35\xaa\x00\xaa\xef\x67\x73\xf8\xe7\xa7\x77\x9f\x2e\xfb\x20\x06\xb8\x87\x65\x4c\x85\x0a\xc0\x32\xb9\xa3\xe4\x27\x2d\xb0\x09\x34\x7a\x5f\x49\xc1\x85\x93\x3b\xda\x4e\x55\x85\x35\x05\x2d\xd6\x3b\x29\xf5\x96\x24\xb4\x95\xcd\xc6\xd2\x76\x58\xd9\x2c\xd7\x55\x24\x1b\x66\x08\x72\xc6\x20\x77\x97\xb3\x79\x4b\x14\x96\xac\x32\x6c\x47\x5c\xd0\x9f\xc6\xc6\x02\xde\x31\x56\xa9\x65\x6e\xfb\x4d\x97\x2d\x7e\xc3\xc9\x9d\x0e\xda\x40\x28\xa7\x0f\xf2\xb9\x97\x18\x12\x7a\xd6\x81\x93\x75\xbb\xb7\xcc\xc2\x5a\xd4\xa8\xce\x9b\xec\x88\x35\x38\x94\x61\xc2\x3d\x77\x9e\xc9\x6e\x35\xfd\x0b\xca\x02\x13\x5b\xab\xb9\x88\xd5\xb8\xb1\xb4\x27\x80\x4d\x1e\x33\xff\xa1\x3d\xd2\xcd\x9b\xdb\xfd\x98\x05\xda\x0c\xde\xe4\x4d\xea\xc6\x95\xc9\x74\xf6\x8e\x99\xe8\xf0\xc2\x71\x19\xe4\x34\x84\xd4\x3e\x91\x98\x06\x20\x21\xd0\xb4\x95\xfd\x20\x63\xed\x96\x55\x90\x92\xcd\x5d\x0c\x14\xa3\x70\xd3\x69\x56\xa3\xc5\xbd\xc0\x65\x77\xbc\x8b\x8b\xf4\x62\xb5\x9f\x3d\x61\x71\x8b\x08\x0a\x53\x1f\xd9\xc5\x83\x64\xb6\xb3\x69\xbf\x5a\x3c\xf4\xd2\xf7\xe3\x64\x19\x1a\xbf\x7c\x72\xdf\xd8\x09\x83\x75\xcb\xc5\xc8\x03\xa3\x75\xa2\x80\x1c\xb9\x24\x98\xa6\x05\x8c\x16\xc2\x35\x5c\xe4\x58\x5f\x28\x2f\xe5\x44\x64\xe8\x59\x3c\xea\x5a\x94\x16\x8f\x96\x8f\x5d\xb3\x78\x18\xee\xde\x43\xae\x31\x12\x66\x48\xa9\xb1\x17\x1a\x3a\x68\x9f\x58\xcb\x1e\x23\x8b\xa8\x85\x79\x57\x06\xfc\xff\xa5\xa9\x54\x30\x72\x80\x28\xe0\x3b\x78\xea\xf6\x77\x70\xe4\x81\xca\x42\x0c\x2b\x60\x0b\x9c\xe5\x49\x22\x85\x75\x69\x65\x74\x2d\x72\x34\x36\x81\x44\xea\xb5\x50\xf1\x7f\xed\x5d\x72\x3a\xd8\x46\xf5\x86\xf6\xc4\x2b\x60\x72\xda\x59\x75\x03\xe9\x7f\x46\x69\x71\x60\x48\x5b\x03\xbc\x99\xb8\x4e\x4e\x70\xf3\x23\xb5\x9e\xfc\x1f\x6c\x08\x19\xfa\x7b\x57\xc0\x2f\x93\x3b\x4a\xfe\xcf\xbe\xb5\x4c\x78\xf8\x31\x5e\x1b\x47\x79\x15\xdc\xfc\x1c\xb1\x6e\x82\x06\x6d\xd4\xc2\x54\x92\xa6\x15\xb3\x96\xae\x29\xcb\xa3\x91\xb4\x10\x12\x07\xc3\x46\xd4\xcc\x61\x7a\x87\xbb\xe1\x60\x44\x4c\x3f\x42\x37\x03\xe2\xa1\x66\xe4\x6b\x81\x63\xea\x56\x30\x6f\xee\x5d\xd6\x57\x95\x36\x2e\xde\x83\xba\x92\x39\xa8\xe1\x3b\x74\x8f\xbc\x41\xfc\xee\xfb\xc3\x9f\x08\xcb\xcf\x45\xd3\x01\x60\x84\x75\xab\x2e\x51\x9f\x11\x39\x2d\x70\x28\xc8\xff\xb6\x5a\x7d\xb5\xbc\xff\xff\x0d\xed\x11\x15\x68\xef\xfe\x07\x11\xfd\x16\xc8\xaf\x16\x48\x2e\xbd\x75\x68\xba\xb7\xd1\x67\xab\xdf\xcc\x39\xc6\xcb\x04\x92\x26\x47\x89\x26\x12\x48\x0c\x6e\x74\x8d\xe1\x07\x91\x72\x02\x89\x45\xe7\xab\x6f\xe5\xfc\x50\xf4\x1f\x2f\xe7\x4d\xe8\x57\x31\x12\xcf\x84\x80\x6f\x99\xfc\x27\x67\xf2\x8a\xfc\xda\x05\xf3\xf2\x78\x9e\x12\xed\xa9\xf9\x98\x81\x4f\xaf\xa0\xd4\x7c\x6a\x45\xc8\xd9\xc9\x05\x5a\x15\x62\x3d\x35\xf3\x98\xd9\x95\xf4\xed\x85\xb3\x9b\x89\x53\x07\x85\x67\xf9\xfa\x19\x48\xcb\x3b\xa2\xac\xe6\x98\xf4\x2b\x9c\xa7\x67\xb1\x68\xed\x53\x6c\x45\xb7\x91\x1a\x8d\x15\xfd\x85\xa4\x6b\x9e\xe4\x39\x44\x01\xfd\x1b\xb2\x41\x89\x35\x53\x2e\xf4\x20\x62\x93\x4e\xee\x20\xa6\x2c\xe6\xd0\x58\xd2\xca\x51\x7a\xf8\x2e\xde\x36\x1d\x22\xd2\x11\x50\x84\x56\x57\x30\x08\xb4\x19\x76\x43\xfe\x60\x16\x4e\x64\x60\x7b\xa8\x89\x1c\x1c\xa4\x9e\x11\xeb\xd2\x81\xd2\xdb\x83\xbd\xa1\x39\x13\x5e\x52\x25\xb2\x1a\x43\x17\x33\x74\xa2\xb5\x43\xe5\x04\xb9\x55\x1b\xc8\xd1\x21\x77\xf4\xca\x1f\xcf\x14\x1a\x2b\x8e\xdd\x21\xd4\x4c\x7a\xb4\x90\x79\x17\xba\x42\x16\x2b\x66\x42\x1b\x45\x8a\x3b\x3c\xd0\x95\xa6\xc1\xaa\xb0\x05\x84\xb2\x0e\x59\x1e\xbf\x17\xd1\xf8\x32\x8c\x1f\x6c\xd9\xe2\x0b\x83\xe1\xfd\x79\xab\x8d\xd9\x85\x2f\x01\x19\xd9\xd8\x72\xcc\x01\xbd\x80\x2b\x43\x77\xdd\x6a\x10\xee\x85\x05\xcb\x0a\xa4\x88\x36\x1f\x14\xc8\xee\x91\x86\x09\xf6\x19\xb0\xc1\x11\xeb\x7c\x39\xe3\x0c\xa4\x1d\xc5\x4d\xe9\xe3\xd6\x15\x59\x4e\xc4\x11\x02\x51\x69\x6b\x45\x26\xf1\x08\x40\x9f\x61\xcf\xe3\xf5\xed\x6b\xd5\xb6\xfe\x5b\xd4\x23\x2d\xf6\xc5\x9b\x51\x57\x9d\x7b\x03\x95\xc1\x3a\xf4\xbe\x2d\x84\x8f\x4d\xa3\x96\x4e\x93\x5b\xe4\x87\xd1\x78\x00\xa4\xd1\xda\xd1\xf6\x42\xdc\x47\x99\xc3\x5e\x50\x12\xf4\x36\xda\xba\x9e\xed\xf2\xa4\xcb\xfb\x71\x0f\x72\xfc\xe5\x2e\x63\xb6\x4c\x07\x30\xaa\x18\xbf\x63\x6b\x6c\xda\xe3\x1f\x21\x43\x29\xb0\x46\xd8\x78\xeb\x1a\x71\x59\xc4\x2f\x93\x12\xf3\x0e\xf3\x72\x17\xbf\xe4\x85\x4f\xc2\xc1\x1b\x6b\x0c\x26\x56\xab\x70\xe2\x55\xb6\x5b\x19\x2c\x20\x55\x90\x2c\x2f\x93\x49\x7f\xcc\x26\xdc\xf8\xab\x63\xc6\xc5\x46\x70\xdf\xe5\x57\x40\xdc\x10\x15\xb6\x9f\xe7\xce\x28\xd2\x51\x00\xed\xa7\x20\x75\x94\x94\xea\x60\x57\xc3\xcf\xf4\xe7\xe0\xa7\xd2\xb1\xb7\x9f\x7e\x18\x7d\x61\x0c\x42\xfe\x1b\x00\x00\xff\xff\xa3\xf9\x91\x7d\xe8\x1e\x00\x00")

func completionShBytes() ([]byte, error) {
	return bindataRead(
		_completionSh,
		"completion.sh",
	)
}

func completionSh() (*asset, error) {
	bytes, err := completionShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "completion.sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"completion.sh": completionSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"completion.sh": &bintree{completionSh, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

