// Code generated by go-bindata DO NOT EDIT.
// sources:
// completion.sh
package completion

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _completionSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5b\x7b\x73\x23\xb7\x91\xff\x9f\x9f\xa2\x3d\x64\x59\x8f\xd5\xac\x24\x9f\xff\x39\xed\x52\x65\x7b\x1f\x77\x5b\x67\x7b\x5d\xab\x73\x52\x89\xa2\x62\x81\x33\x3d\x1c\x44\x20\x30\x05\x60\xc8\xa5\x15\x7d\xf7\x54\x03\x98\x17\x67\x28\xaf\x12\x79\xe5\x24\x62\xd5\xd6\x52\x78\x34\x1a\xfd\xf8\x75\x03\x6c\x8c\xbf\x38\x9e\x73\x79\x3c\x67\x26\x1f\x8d\xc6\x30\x9b\xa5\x89\x32\xb3\x97\x39\x8a\x02\x35\x64\xa5\x4c\xce\xa9\xd9\xb7\x26\x82\x83\x29\xe7\x89\x5a\x2e\x99\x4c\xcf\x47\xa3\x30\x3c\xc5\x79\xb9\xd8\x3f\x80\x9b\x11\x00\x00\xcf\xe0\xf2\x12\x62\x09\x93\x9b\xd7\xaf\xde\x5f\xcc\x5e\xbd\xff\xe1\xa7\xd9\xeb\x37\xdf\xfd\xfc\x3f\xb3\xb7\xef\xbe\x7f\x73\x0b\x57\x57\x2f\xc0\xe6\x28\xdd\x68\xfa\x60\x92\x2b\x88\x26\x37\x6f\x7f\xfe\xf1\xd5\x8f\xdf\xfe\xf0\xe6\xf2\xf4\xea\xf6\x0c\x26\x87\x11\x9c\x9f\x53\xfb\x20\x99\xc8\x4d\xcf\xf8\xe8\x76\x44\x9c\xbf\xca\x31\xb9\x36\xb4\x38\x93\xc0\xb4\x66\x1b\x50\x59\x8b\x5b\x03\x89\x92\x96\x71\x69\x80\xb5\x9a\x9f\x8f\xc6\x60\xd8\x02\xcf\xaa\xad\x57\xa3\x66\xcd\x18\x78\x99\x2c\xd3\x73\x78\xe9\xa8\x9a\x99\xca\x5a\x7d\xe6\x7c\x74\xc7\xc4\x5a\x26\x42\x25\x4c\x80\x41\xbc\xe6\x72\x31\x9d\x9c\xbe\x00\x93\xf3\xcc\xb6\xfa\x34\x9a\xe9\xa9\xdf\x92\xd2\x90\x2c\xd3\x17\x90\xaa\x5a\x42\x5e\xa6\x93\x64\x99\xc2\x74\x0a\xd1\x24\x50\x8a\xfa\xb2\xa4\x0f\xd1\x3a\xe9\xb4\xcc\x35\xb2\xeb\xba\x25\xe3\xee\x6b\xaa\x24\x8e\xfc\x78\x5b\x6a\x09\x13\x8d\x26\x48\xf3\x82\xcb\x04\x61\xb6\x40\x3b\x4b\xd4\xb2\x98\xad\x95\x4e\xcd\x6c\xbe\x99\x69\xcc\x80\x1b\x90\xca\x02\x5b\x31\x2e\xd8\x5c\x20\x70\x09\xbf\x98\x7c\x34\x86\x35\x82\x44\x4c\x81\x41\xa1\xb4\xc5\x14\x56\xa8\x0d\x57\x12\x6c\xce\x2c\x24\x4c\xc2\x1c\xc1\xa8\x52\x27\x98\xc2\x3a\x47\x09\xa5\xe1\x72\x41\xb3\x9f\x8f\x5a\x76\xf3\xe7\x8b\xff\x9d\xfd\xe1\xcd\x87\x8b\x77\xef\x7f\x3c\x7b\x66\xd0\x92\xcd\xc0\x97\x5f\xc2\x17\x60\x37\xc5\x4e\xbe\xce\x8f\x53\x5c\x1d\xcb\x52\x08\xf8\xea\xfc\xcb\xd3\x20\x98\x1d\x83\x6b\xd5\xd0\x67\x9d\x73\x81\x70\x09\x93\x31\xc4\x0b\x0b\x27\x70\xd5\x91\x7e\xf5\x49\x98\x41\x88\x26\xa7\x11\x70\xd9\xef\x2c\xf5\x41\xaf\xb1\xd5\x39\x9d\xdc\x38\x13\xfe\xe3\xfb\x0f\xaf\x2f\x2e\xdd\xd7\x57\xf4\xfd\xea\x76\xe7\xac\x17\x2f\x7a\x5d\x85\xc6\xd5\xee\x65\xa8\x77\xd7\x3a\xf1\xe9\xfd\x56\x72\xd2\xda\xbd\x94\xeb\x9e\xee\x47\x9d\xd5\xbe\xb9\xba\x8d\x76\x4f\x19\x58\x24\x21\x32\x77\x88\x8d\xba\xa7\x93\x66\x13\xf7\xa1\x1d\xcb\xdd\x84\xc7\xc0\x8c\x29\x97\x08\x35\xf3\xdf\x7d\x78\xf3\xed\xff\x5d\x90\x6d\x33\xa1\x91\xa5\x1b\x30\x68\xc1\x30\x89\x62\xb3\x93\x4c\xe3\xc4\x9f\xc8\x13\x1a\x96\xf4\x1a\xbb\x54\x9c\x57\xde\x8e\x32\xee\x1c\xf1\x35\x66\xac\x14\x16\xe6\x98\xb3\x15\x57\x1a\xac\x82\x05\x5a\x32\x6d\x90\xf8\xd1\x42\x05\x35\x99\x56\x4b\xd7\x9a\x94\x5a\xa3\xac\x3b\x9e\xc3\x3b\xe9\xdb\xc9\x78\x55\x06\x71\x4c\xe0\x0e\x34\x67\xc9\x36\x73\x04\x65\x73\xd4\x60\xb8\x2d\x99\xe5\x4a\x9a\xd1\x98\x1c\x9a\xa6\x64\xa5\x2d\x35\x7a\xe7\x35\xb9\x2a\x45\x0a\x28\x53\xa2\x5c\x08\xa4\xb1\x47\x60\x73\x6e\x02\x7e\x18\x38\x3d\xf2\xc4\xd6\xdc\x20\x9c\x8c\xc6\xa3\x31\x7c\xeb\xc4\x4c\x98\x3b\xa9\x38\x5d\x31\xcd\x1d\x6c\xe0\x47\x6e\xac\xa9\x16\x4b\x98\x10\x84\x05\x84\xa3\xb4\x31\xb7\xea\x9a\x0b\x51\x01\xb7\x67\x49\x95\x32\x6d\xe1\xf7\xd6\x12\xf7\x22\xce\x4d\x5b\x60\x04\x5f\x4a\xa7\x30\x47\x1a\x88\x2b\x26\x4a\x46\x10\x56\x0b\x96\xcb\xa2\xb4\x60\xac\xa6\xfe\x7d\xb7\x71\x6e\x20\xc5\x8c\x4b\x4c\x69\xa1\x10\x08\x96\xc4\xab\x51\x41\x62\x72\x8f\x94\x47\x88\xa8\xd5\x5c\xe0\xf2\xa0\x09\x9a\x4e\xb3\xb3\xb0\x91\x59\xc1\xb4\xc1\x1a\x95\x2a\x44\x8a\x26\x49\x04\xb1\xb0\xf4\x85\xd8\x8b\xb6\xa0\x89\x4f\xa3\xc9\x8d\xf3\xc5\xcb\xe4\x2a\xc4\x44\x68\xa0\x8a\xf7\xa0\xca\xab\xff\x6f\x71\xde\x77\x8e\x31\x85\x19\x67\x1c\xe4\x05\x90\x09\xb6\x38\x82\x44\xcd\x35\x03\x63\x55\x61\x80\x58\xa4\xcd\xf3\xe5\x12\x53\xce\x2c\x8a\x0d\x6d\x74\x8d\x55\x04\xc9\x51\x63\x8f\x6c\xe8\x3b\xed\x75\x6c\xf9\x47\x7c\x78\xb0\xdd\x74\xd8\x67\x32\x88\x6b\x4a\x7b\xeb\xfb\xd7\x98\x6c\x80\x1b\xc0\x2c\xc3\xc4\xf2\x15\x71\xb8\x10\x6a\x4e\xc1\x57\x05\x93\x62\x1b\xe0\x3e\x18\x25\x9a\xad\x05\xd8\x5c\xab\x72\x91\x3b\x1d\x33\xbd\x28\x97\x28\xad\x01\xe6\x8d\xa3\xd0\x6a\xa1\xd9\x72\x60\x21\xc9\x56\x7c\xc1\x2c\x9a\xe0\x2a\x32\xb1\x2e\xd2\x69\x44\xe7\x5c\x46\x11\x2f\xce\x80\x99\x58\xb3\x8d\x21\x33\xa8\xdd\xb6\x94\x04\x32\xce\xe2\x06\x68\xb3\xcc\x52\xf6\xc5\x65\x4a\xe2\xde\xf6\xf5\x23\x92\x38\x97\x89\x46\x62\x95\x56\x99\x63\xa6\x34\xfa\x28\x4f\x33\x54\x69\xc9\xd5\x69\xa2\x50\xaa\xe8\xad\xb0\xbf\x9f\x3c\x7b\x76\xd0\x17\x6e\x37\x4d\x18\xd0\x53\x07\xbf\xda\x54\xb6\x73\x89\x13\x4a\x24\x82\xa5\xe7\x4c\xa6\x02\x5d\x0c\xd6\x58\x88\x4d\x6d\xe4\xed\xf4\x11\xa2\x06\x56\x8c\x4b\xfe\x46\xad\xec\x88\x4f\x4f\x46\x4d\x72\x54\x0f\x24\xaf\x8b\x26\xdf\x44\x1d\x97\x18\x43\xc6\x05\xc9\x8f\xa4\xd0\x22\x4a\x3e\x95\xe4\xc4\xe9\x9e\x85\x25\xb3\x49\xde\xc1\xcb\x8e\x2a\xaa\x7c\xab\x59\xc9\xa5\x5d\x49\xa9\xa3\xc3\xe1\x9c\x6b\x0c\x09\x65\xa0\x34\xd3\x51\x6d\x66\xaa\x2c\x43\x4d\x08\x51\x39\x95\xb7\x43\x96\x24\x58\x90\xa1\xc9\xda\xea\x02\x87\xdc\xc0\x92\xe9\x6b\x4c\x61\xbe\xa1\xee\xe9\xd6\x42\x3c\x03\xa3\x8e\x28\x8d\x2d\x58\x82\x55\x3a\xb6\x64\xb2\x64\x42\x6c\x80\xa5\x29\xa6\x60\x5c\x06\x47\xac\x94\x06\xb5\xf3\x89\x8f\x05\x26\x84\x68\x56\xd1\x18\xc8\x4a\xed\x90\xdf\xe1\x5a\x67\x89\x00\x1e\xcd\x1e\x06\x13\x9e\x38\x3e\x9c\x0e\x38\x28\x7d\x28\xaa\x7e\x78\xf3\xd3\xf7\x7f\xba\xe4\xcf\x9e\x5d\x4d\x3b\xa4\x06\x27\x0c\x84\xca\xfb\x93\x86\x4f\xa2\xdd\x31\xe1\x76\x26\x7c\xeb\x8e\x11\x4c\x08\xe3\xbd\xad\x95\xc7\xcf\x37\xa0\x4a\xdd\x8e\x22\x2b\x94\xce\xa8\xe8\xfc\xf0\xff\xef\x5f\xbf\x3f\x6b\x94\xe8\xcc\xdd\x0d\x63\xd2\xa1\x3e\x9b\x8b\x0d\x39\x3f\xad\x02\x4b\x72\x54\xfc\x58\x08\x9e\x70\x2b\x36\x34\x9d\x22\x09\x0b\x41\xcc\xc7\x38\x21\xd4\x9a\x28\x54\xd1\xcc\xf8\x70\xb6\x1d\xcd\x4c\xa2\x0a\x0f\x36\x4c\x93\xc9\x69\x8d\x89\x3d\x1b\x8d\x2b\xa0\x30\x67\xc3\x27\x21\x17\xbb\x6a\xc4\xca\x95\x48\x4d\x33\xe9\xac\xb2\x5f\xb7\x73\xab\xdc\x6a\xc0\xa5\x55\x5b\xfe\xdc\x50\x74\x0e\x3d\xaa\x8d\x93\xd5\xb3\xd7\xcc\xc0\x82\xaf\x50\x1e\x05\xef\xf0\x71\xd7\x85\x5e\xb2\xfb\xc4\x96\x4c\xd4\xa3\xe9\x9f\x5b\xcc\x21\xb1\x31\x2a\xe1\x3e\x02\x07\x4e\xdb\xa7\x23\xef\xf9\x37\xd5\x96\x5c\xe6\x79\xe7\x89\x29\x8c\xdc\x71\x62\xea\x22\xd1\x76\x92\x71\xe6\xe8\x04\x40\xaa\x3e\xe1\x48\xd7\x18\x09\x19\x4d\x15\xcd\xb7\x3c\xd6\xac\x59\x01\x31\xf1\x5c\xeb\x40\x32\x52\x37\xed\x66\xd6\x19\xdc\x10\x9c\xd6\xdb\x3b\x3e\x8e\x8f\x67\xb7\xa3\x3b\x38\xae\x2c\x82\xd4\xd4\x68\x76\x72\x23\x98\xa9\x79\xba\x9d\x4d\x6e\x1a\xea\xb7\x5d\x67\x69\x33\x3f\xbd\x73\x5e\x57\x08\xad\x71\xd3\x49\x47\x02\x9d\x71\x3c\x83\x14\x13\x41\x66\x1a\x67\x10\x75\x46\x46\x70\x0e\xf5\xc9\x6d\x40\x37\xf4\x99\xec\x14\x2e\x0a\xd3\x4f\x39\xba\xc2\x99\xdc\xb4\x67\xdf\x42\xaa\xd0\x43\xa6\x73\xaa\xae\x1c\x02\x20\x54\x1f\x1f\xcd\x76\xc1\x45\xe5\x10\xfe\x44\x3b\x2b\x44\xb9\xe0\x72\xd6\x0a\x39\x75\xa4\x23\x3d\xa7\x5c\xef\x88\x57\xe6\x9a\x17\x24\x22\x4f\xc0\xf1\x47\x31\x2a\x67\x2b\xf4\xce\x54\x01\x5c\xca\xc9\xc3\x95\xde\x6c\x99\x79\x9c\xc2\x84\xc8\xef\x88\x4c\x26\x47\x21\xbc\x03\xa6\xdc\x10\xa0\x4c\x2f\x5e\x7d\x75\xf2\xf5\xd7\x5b\xe3\x42\xa7\x81\x35\xd3\x92\xcc\x89\xcd\x29\x86\xfa\x33\x3a\x65\x23\xc4\x3f\x6d\x85\x92\x0a\xd3\x95\x9b\xa2\x7c\xc5\xdf\x05\x4c\xf6\xdd\xd8\x88\x58\x72\x37\x4b\x11\xc4\xee\xdc\x9e\x41\xcc\xc9\xee\x21\x3a\x7c\x6e\xf2\xe8\x60\xf0\x90\xdd\xd5\x9d\x13\xad\xc7\xdc\x26\x90\xbb\x94\x7c\x42\xcb\xf5\x11\x7f\xc7\x6e\x4f\x4f\xfe\xfb\x64\x60\x6c\xbd\xe3\xd6\xa4\x6a\xf3\x15\x56\x25\x8c\x94\xe1\x41\xd9\x43\xa7\xd7\x77\x8f\xdc\x73\x88\x06\x98\xaa\x33\xa3\x41\x03\x72\x7b\x65\xa5\xcd\xb7\xae\x8a\x38\x74\xfc\x88\x67\xf0\x05\xdc\x75\x70\xd8\xd2\x7b\xcb\x6e\xe9\x20\xd9\xd0\xad\xf0\x67\xba\x1f\x09\x6e\x6c\x5c\x68\xb5\xe2\x29\x6a\x13\x41\x24\xd4\x82\x4b\xff\xbf\x2a\x6d\x38\xc8\xfb\x69\x94\xb6\xd0\x1c\x7f\x7a\x88\x0e\x6a\xae\x2e\x21\xfe\xa5\x83\xae\x5b\x8c\x54\xa9\x44\xa9\x07\x4e\x22\x03\x21\x7e\x47\xca\x48\x4e\xec\x78\x70\x40\xff\x6b\x27\x89\xfb\xd1\xed\xc4\x90\x4f\x4e\x7e\x07\x24\xbc\x2b\x3c\xba\x54\xb8\x56\xf4\xcc\x89\xf9\x33\xa9\x3b\xe8\x0d\x2a\xc5\xb9\xae\x28\x8e\x0b\x66\x8c\xbb\x5b\xe9\xb5\xc4\x64\xc1\xad\x66\xcd\x57\xcc\x62\x7c\x8d\x9b\x76\xa3\x37\x9a\xa6\x85\x72\x4c\xf2\xec\xd0\xf2\x50\xf6\x31\x94\x5f\x8e\x43\x06\x6f\xca\xa2\x50\xda\xfa\x8c\xba\x4e\xbe\x5a\x60\xb9\xc1\xfe\xd5\xcc\x16\x9e\xef\xb0\x9f\xdf\xd2\x32\x3f\xd5\xa0\xb6\x6c\x86\x1b\x3b\xab\x7d\xf5\xf3\x1a\x4f\x65\x3b\xa4\xe7\xbf\x1a\x25\x1f\xcc\xfb\xff\x73\xb5\xdb\x03\x04\x55\xda\xc7\x51\xea\x93\x2e\x1f\x4c\x97\x89\x28\x8d\x45\xfd\xf9\x03\x39\xb3\x96\x25\x79\x04\x51\x70\x53\x02\x8b\x08\x22\x8d\x4b\xb5\x42\xf7\x85\xa0\x39\x82\xc8\xa0\x2d\x8b\xa7\xb8\xbe\x4d\xfa\x9f\x8f\xeb\x41\xf5\x33\xaf\x89\xc7\xf2\xe4\xa6\xcb\x1d\x2e\xa7\xfb\x41\x9d\xfe\x2e\xf9\xdd\xdb\x8b\xe9\x64\xef\x2f\x72\x0f\xdc\xcd\x63\xac\x41\x70\x89\x94\x82\x43\xc5\xbe\x9b\xf6\x6c\xba\x1f\x4d\xa8\xcb\xe7\xe7\x12\xe1\x25\xbc\xdc\x27\x76\xab\x71\x40\x06\x06\x71\xec\x8f\xb0\x5f\xb5\x4e\x6f\x9e\x87\x86\xcc\x4d\x87\x72\xeb\xe7\xa1\x6e\x92\xff\xd6\x9d\xb7\x2b\xea\x9e\x2c\x9d\xa8\xdf\xbd\xa6\xb4\x74\x88\xca\x13\x6a\x0d\x53\xbe\x1f\xdd\x96\x3c\xef\xa0\x7b\x0f\xec\x73\x79\xca\xe3\x65\x27\xde\xfd\x30\x7d\x4a\x55\x7e\xbb\xf0\x36\xf3\x61\xe5\x11\x95\x2c\x84\xfb\xbf\x94\x75\x01\xc2\x13\xf6\x3d\x99\xf4\xe3\x63\x9f\x4f\xb3\xfe\xb5\xd3\xf8\xdf\x1d\xda\xb8\x94\xf5\x71\x64\xea\x7a\xa2\x38\x4e\x58\x9c\xa0\xb6\xa6\xb9\xed\xe0\xd2\x60\x52\x6a\xac\x1b\x5a\x57\x1f\xf4\x97\x8a\xdd\x4d\x62\xbb\xc1\x5f\xed\x3e\xdd\xbf\x3c\x3a\x46\xdc\xd7\x0e\x95\xcc\xf8\xe2\xf3\x9f\xe9\x0c\xd2\x11\xce\xe4\x6a\x1d\x41\x54\x4a\xfa\xf3\xe9\xdc\x06\x0f\x7e\x6e\x73\xda\x25\x90\x79\x82\xed\x41\xbd\xdd\x1b\xb6\x83\x40\x73\xb5\x7e\x92\xe8\x43\x4a\xd4\x41\xc0\x93\x48\x1f\x44\xa4\x3e\x16\x3f\xc2\x3d\x5d\x9a\xf6\x6e\xe7\x9e\x40\x1d\x1e\x1a\xd4\xc3\xcf\xf0\x2c\x4d\x1f\xef\x90\x5a\x16\x29\xb3\xf8\xfb\x57\xe1\x3f\xe6\x3a\x8f\x7c\xcd\xf3\xa0\x37\x3b\xbf\x37\xd1\x3e\xe6\xf5\xca\xbf\x9b\x4c\xfb\x52\x9c\x9e\x7e\x06\x98\x2f\x6d\x1e\x41\x14\x4e\xb0\xf4\xcd\x85\xf0\xe6\xf7\x99\x70\x16\xbc\x03\xfa\xc9\xca\xc3\xd3\x99\x4a\x29\x7e\x5c\x53\x62\x14\x56\x3b\xe8\xf2\x10\xce\x5e\xb3\x94\xeb\x7b\xdc\x81\x6d\x51\xbd\xe3\x16\x2c\x54\x28\x85\x4b\xb0\xba\x98\xad\x7f\x0f\xd6\xa1\x75\xb3\xb5\xc0\xaf\x5c\x86\x85\x45\xaa\xd1\xee\x1a\x6c\x88\xc2\xa7\xde\xf0\x75\xc5\x72\x9f\xdd\x85\x79\x31\xcd\x1b\xd8\x64\x97\xf9\x9f\x6a\xb6\xb7\xcb\xb5\x38\x86\xbb\xbc\x2e\x27\x8d\xd1\xff\x5a\x1d\xd9\xce\xc9\x6e\xf6\x18\xa4\x6a\x17\x22\x56\x15\x97\x7e\x02\x02\x72\x57\xe7\xeb\x6c\x0c\x94\x6e\x97\x82\x3e\x8c\xbf\x0f\x5f\x13\xf8\xb2\xd8\x81\xcb\x82\x96\x84\x34\x5f\xe4\x16\xa4\x5a\x0f\xcc\x77\xa5\x56\xae\x56\x4f\x20\x5b\xa1\x2b\xe7\x76\x25\xf9\xca\xa2\xb4\x9c\xbc\x46\x69\x48\xd1\x62\x62\x5d\x81\x9a\xdb\x9f\xab\xda\xb2\xec\x1a\x61\xc5\x44\x89\x06\xe6\xa5\x75\xe5\xb1\x06\x0b\xa6\x5d\x3d\xa9\xe0\xd7\xfd\xe2\xad\x31\xc4\xb1\xe3\xce\x4d\x03\x2e\x8d\x25\x43\x72\x0f\x66\xa8\x7d\xea\xda\x07\xa6\xad\x71\x4f\xa3\x2b\x27\x5c\x2b\xad\x37\x4d\xd9\x5c\x75\x31\xb2\x75\x27\x02\x36\x77\xcf\x0d\x8c\x02\x6e\xf7\x0c\x18\x96\x21\x58\x05\x7c\x21\x55\x78\x6c\xd3\x5b\xe5\xd3\xae\x4d\x08\x3a\xfa\x8a\x78\xfc\x2b\x97\x01\xa1\x49\xd5\xaf\x11\x26\x89\x38\xd7\x23\xe1\x15\xca\x18\x3e\x17\xd8\x33\xd6\x2e\x1d\x2e\xc9\xdf\x05\x94\x86\x2d\xf0\xa8\x79\x63\x14\x9e\x5d\x18\xe5\x1e\x2c\x95\x45\x78\xd5\xd3\x7e\xe2\x11\x16\xb5\xaa\x5d\xef\x7c\xe4\x14\x69\x4a\x8d\x83\xd7\x57\x63\xc8\xd5\x1a\xd6\x08\x6b\x26\x2d\x4d\xf5\xa2\x19\x56\xda\xa3\x67\xc3\xcd\x73\xa4\x1d\x2f\x2e\x26\xdf\xd4\x08\xb2\xa3\x44\xf4\xbf\xbe\x0e\xfd\xa1\x11\x4a\x59\x1a\x6c\xbd\xe1\x0a\xc5\x92\x47\xee\xe9\x21\x70\x53\x0d\xa8\x5f\x02\x85\xd0\x54\x6a\x3f\xc2\x3d\x55\xf2\xef\xfa\x3a\xc5\xc3\x61\x19\xd2\x49\xa7\xdd\x29\x47\x2b\x65\x69\x7a\xc6\x3f\x7a\x9a\xed\xaa\xe3\xc8\x6d\x29\x6c\xa4\x7e\x1d\x50\x07\xbf\xf1\x56\xb5\x7b\xf7\x5d\xd8\x9c\x99\xbc\x05\xf4\x50\xb0\xe4\x9a\x2d\x30\x3c\xc4\x78\x07\x73\x14\x1c\x57\x08\xcb\xd2\xd8\x40\x6e\xee\xc1\x81\x09\x81\x69\x0d\x2a\x62\xe3\x8b\x52\xdd\x3b\x6a\x27\xe8\xe1\x57\xa7\xb1\x84\x68\x7a\x16\x0d\xca\x63\x34\xa0\xa1\x0b\xcb\xb4\xed\x96\xbf\x82\x92\xb0\x47\x48\xbc\x17\xea\x60\xc3\xf3\xaf\xc3\x3a\x1e\x38\x0a\x64\x01\x75\x04\x88\x95\xe3\x2c\x64\x38\xf4\x67\xeb\xab\x54\xfe\x1d\x49\xfc\xb6\xf3\x82\xcd\x11\xf9\x7b\x00\x00\x00\xff\xff\x8c\xea\xa9\xfa\x1f\x3e\x00\x00")

func completionShBytes() ([]byte, error) {
	return bindataRead(
		_completionSh,
		"completion.sh",
	)
}

func completionSh() (*asset, error) {
	bytes, err := completionShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "completion.sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"completion.sh": completionSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"completion.sh": &bintree{completionSh, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

