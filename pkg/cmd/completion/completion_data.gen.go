// Code generated by go-bindata DO NOT EDIT.
// sources:
// completion.sh
package completion

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _completionSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5b\x7b\x73\x1b\xb7\x11\xff\x9f\x9f\x62\x73\xe4\x44\x0f\xeb\x2c\x29\xcd\x3f\x95\x43\x4d\x12\x3f\x5a\x4f\x93\x38\x63\x35\xed\xb4\xaa\x86\x03\xde\xed\xf1\x50\x81\xc0\x0d\x80\x23\xcd\xa8\xfa\xee\x9d\x05\x70\x2f\xde\xd1\xb1\x5a\xc5\x8a\x5b\x71\xc6\x63\x12\x8f\xc5\x62\x1f\xbf\x5d\x40\x8b\xf1\x67\xc7\x73\x2e\x8f\xe7\xcc\xe4\xa3\xd1\x18\x66\xb3\x34\x51\x66\xf6\x55\x8e\xa2\x40\x0d\x59\x29\x93\x73\x6a\xf6\xad\x89\xe0\x60\xca\x79\xa2\x96\x4b\x26\xd3\xf3\xd1\x28\x0c\x4f\x71\x5e\x2e\xf6\x0f\xe0\x66\x04\x00\xc0\x33\xb8\xbc\x84\x58\xc2\xe4\xe6\xc5\xf3\x37\x17\xb3\xe7\x6f\xbe\xff\x71\xf6\xe2\xe5\xb7\x3f\xfd\x61\xf6\xea\xf5\x77\x2f\x6f\xe1\xea\xea\x19\xd8\x1c\xa5\x1b\x4d\x1f\x4c\x72\x05\xd1\xe4\xe6\xd5\x4f\x3f\x3c\xff\xe1\x9b\xef\x5f\x5e\x9e\x5e\xdd\x9e\xc1\xe4\x30\x82\xf3\x73\x6a\x1f\x24\x13\xb9\xe9\x19\x1f\xdd\x12\xe3\x17\x5c\x26\x08\xb3\x05\xda\x59\xa2\x96\xc5\x6c\xad\x74\x6a\x66\xf3\xcd\x4c\x63\x06\xdc\x80\x54\x16\xd8\x8a\x71\xc1\xe6\x02\x81\x4b\xf8\xd9\xe4\xa3\x31\xac\x11\x24\x62\x0a\x0c\x0a\xa5\x2d\xa6\xb0\x42\x6d\xb8\x92\x60\x73\x66\x21\x61\x12\xe6\x08\x46\x95\x3a\xc1\x14\xd6\x39\x4a\x28\x0d\x97\x0b\x9a\xfd\x74\xd4\xda\xe8\xdf\x2f\xfe\x38\xfb\xcb\xcb\xb7\x17\xaf\xdf\xfc\x70\xf6\xc4\xa0\xa5\x4d\xc2\xe7\x9f\xc3\x67\x60\x37\xc5\x4e\xbe\xce\x8f\x53\x5c\x1d\xcb\x52\x08\xf8\xe2\xfc\xf3\xd3\x20\x95\x1d\x83\x6b\xf9\xd2\x67\x9d\x73\x81\x70\x09\x93\x31\xc4\x0b\x0b\x27\x70\xf5\x0c\x52\x55\x77\x57\x9f\x84\x19\x84\x68\x72\x1a\x01\x97\xfd\xce\x52\x1f\xf4\x1a\x5b\x9d\xd3\xc9\x8d\x93\xf9\x5f\xdf\xbc\x7d\x71\x71\xe9\xbe\x3e\xa7\xef\x57\xb7\x3b\x67\x3d\x7b\xd6\xeb\x2a\x34\xae\x76\x2f\x43\xbd\xbb\xd6\x89\x4f\xef\xb6\x92\x93\xd6\xee\xa5\x5c\xf7\x74\x3f\xea\xac\xf6\xf5\xd5\x6d\xb4\x7b\xca\xc0\x22\x09\x91\x79\x8f\xd8\xa8\x7b\x3a\x69\x36\x71\x17\xda\xb1\xdc\x4d\x78\x0c\xcc\x98\x72\x89\x50\x33\xff\xed\xdb\x97\xdf\xfc\xe9\x82\x6c\x9b\x09\x8d\x2c\xdd\x80\x41\x0b\x86\x49\x14\x9b\x9d\x64\x4c\xce\x33\x7b\x17\x9e\xd0\xb0\xa4\xd7\xd8\xa5\x92\x2a\x89\xa3\xdb\x51\xc6\x47\xe4\x88\x2f\x30\x63\xa5\xb0\x30\xc7\x9c\xad\xb8\xd2\x60\x15\x2c\xd0\x92\x69\x83\xc4\x77\x16\x02\x7a\x40\xa6\xd5\xd2\xb5\x26\xa5\xd6\x28\xeb\x8e\xa7\xf0\x5a\xfa\x76\x32\x5e\x95\x41\x1c\x13\x1a\x01\xcd\x59\xb2\xcd\x1c\x41\xd9\x1c\x35\x18\x6e\x4b\x66\xb9\x92\x66\x34\x26\x87\xa6\x29\x59\x69\x4b\x8d\xde\x79\x4d\xae\x4a\x91\x02\xca\x94\x28\x17\x02\x69\xec\x11\xd8\x9c\x1b\xd0\x68\x4b\x2d\x0d\x9c\x1e\x79\x62\x6b\x6e\x10\x4e\x46\xe3\xd1\x18\xbe\x71\x62\x36\xc0\x60\x52\x71\xba\x62\x9a\x3b\xd8\xc0\x77\xdc\x58\x53\x2d\x96\x30\x21\x08\x0b\x12\x25\x2d\x6d\xcc\xad\xba\xe6\x42\xb8\x16\x56\xb1\xa4\x4a\x99\xb6\x50\x73\x6b\x89\x3b\x11\xe7\xa6\x2d\x30\x82\x2f\xa5\x53\x98\x23\x0d\xc4\x15\x13\x25\x23\x08\xab\x05\xcb\x65\x51\x5a\x30\x56\x53\xff\xbe\xdb\x38\x37\x90\x62\xc6\x25\xa6\xb4\x50\x80\xef\x25\xf1\x6a\x54\x90\x98\xdc\x23\xe5\x11\x22\x6a\x35\x17\xb8\x3c\x68\x50\xde\x69\x76\x16\x36\x32\x2b\x98\x36\x58\xa3\x52\x85\x48\xd1\x24\x89\x20\x16\x96\xbe\x10\x7b\xd1\x16\x34\xf1\x69\x34\xb9\x71\xbe\x78\x99\x5c\x05\x10\x87\x06\xaa\x78\x0f\xaa\xbc\xfa\xff\x15\xe7\x7d\xe7\x18\x53\xac\x71\xc6\x41\x5e\x00\x99\x60\x8b\x23\x48\xd4\x5c\x33\x30\x56\x15\x06\x88\x45\xda\x3c\x5f\x2e\x31\xe5\xcc\xa2\xd8\xd0\x46\xd7\x18\x2c\x00\x72\xd4\xd8\x23\x1b\xfa\x4e\x7b\x1d\x5b\xfe\x11\x1f\x1e\x6c\x37\x1d\xf6\x99\x0c\xe2\x9a\xd2\xde\xfa\xfe\x35\x26\x1b\xe0\x06\x30\xcb\x30\xb1\x7c\x45\x1c\x2e\x84\x9a\x33\x41\x8c\x7a\x93\x62\x1b\xe0\x3e\x18\x25\x9a\xad\x05\xd8\x5c\xab\x72\x91\x3b\x1d\x33\xbd\x28\x97\x28\xad\x01\xe6\x8d\xa3\xd0\x6a\xa1\xd9\x72\x60\x21\xc9\x56\x7c\xc1\x2c\x9a\xe0\x2a\x32\xb1\x2e\xd2\x69\x44\xe7\x5c\x46\x11\x2f\xce\x80\x99\x58\xb3\x8d\x21\x33\xa8\xdd\xb6\x94\x04\x32\xce\xe2\x06\x68\xb3\xcc\x52\xba\xc0\x65\x4a\xe2\xde\xf6\xf5\x23\x92\x38\x97\x89\x46\x62\x95\x56\x99\x63\xa6\x34\xc2\x5c\x23\xbb\xa6\x19\xaa\xb4\xe4\xea\x34\x51\x28\x55\xf4\x56\xd8\xdf\x4f\x9e\x3c\x39\xe8\x0b\xd7\x11\x78\x9f\x9e\x3a\xf8\xd5\xa6\xe2\x50\x0b\x1a\x6d\x9f\x50\x1e\x11\x2c\x3d\x67\x32\x15\xe8\x62\xb0\xc6\x42\x6c\x6a\x23\x6f\xe7\x3b\x10\x35\xb0\x62\x5c\xb6\x32\x72\x63\x84\x4a\x98\x00\x3e\x3d\xf1\x3f\x33\xa5\x5b\xf8\x43\x5e\x17\x4d\xbe\x8e\x3a\x2e\x31\x86\x8c\x0b\x92\x1f\x49\xa1\x45\x94\x7c\x2a\xc9\x89\xd3\x3d\x0b\x4b\x66\x93\xbc\x83\x97\x1d\x55\xf8\x5c\x64\xd2\x5a\x69\x3a\x25\x17\x2c\x75\x74\xd8\x4f\xb8\xfc\xaa\x49\x8e\xc9\x35\xcd\x74\x54\x9b\x99\x2a\xcb\x50\x13\x42\x54\x4e\xe5\xed\x90\x25\x09\x16\x64\x68\xb2\xb6\xba\xc0\x21\x37\xb0\x64\xfa\x1a\x53\x98\x6f\xa8\x7b\xba\xb5\x10\xcf\xc0\xa8\x23\x60\x60\x0a\x96\x60\x95\x8e\x2d\x99\x2c\x99\x10\x1b\x60\x69\x8a\x29\x18\x97\xc1\x11\x2b\xa5\x41\xed\x7c\xe2\x5d\x81\x09\x21\x9a\x55\x34\x06\xb2\x52\x3b\xe4\x77\xb8\xd6\x59\x22\x80\x47\xb3\x87\xc1\x84\x27\x8e\x0f\xa7\x03\x0e\x4a\x1f\x8a\xaa\x6f\x5f\xfe\xf8\xdd\xdf\x2e\xf9\x93\x27\x57\xd3\x0e\xa9\xc1\x09\x03\xa1\xf2\xee\xa4\xe1\x83\x68\x77\x4c\x38\xe3\x8d\xf5\xba\xc4\xf7\x39\x13\xc2\x78\x6f\x6b\x82\x0c\xe9\x41\x95\xba\x1d\x45\x56\x28\x9d\x51\x3d\x1d\x8d\xe1\xcf\x6f\x5e\xbc\x39\x6b\x94\xe8\xcc\xdd\x0d\x63\xd2\xa1\x3e\x9b\x8b\x0d\x39\x3f\xad\x02\x4b\x72\x54\x7c\x57\x08\x9e\x70\x2b\x36\x34\x9d\x22\x09\x0b\x41\xcc\xc7\x38\x21\xd4\x9a\x28\x54\xd1\xcc\xf8\x70\xb6\x1d\xcd\x4c\xa2\x0a\x0f\x36\x4c\x93\xc9\x69\x8d\x89\x3d\x1b\x8d\x2b\xa0\x30\xc4\x95\x66\x1b\xc2\x82\x66\x37\xc6\x07\xed\x1a\xb1\x72\x25\x52\xd3\x4c\x3a\xab\xec\xd7\xed\xdc\x2a\xb7\x1a\x70\x69\xd5\x96\x3f\x37\x14\x9d\x43\x8f\x6a\xe3\x64\xf5\xec\x35\x33\xb0\xe0\x2b\x94\x47\xc1\x3b\x7c\xdc\x75\xa1\x97\xec\x3e\xb1\x25\x13\xf5\x68\xfa\xe7\x16\x73\x48\x6c\x8c\x4a\xb8\x8f\xc0\x81\xd3\x06\x00\x96\xa9\xf7\xfc\x9b\x6a\x4b\x2e\xf3\xec\x06\xc6\xe0\xc1\xcb\x34\xb8\xae\x1f\x19\x0d\x7b\x6f\x17\x89\xb6\x93\x8c\x33\x47\x27\x00\x52\xf5\xf1\xc0\xd4\x32\x12\x32\x9a\x2a\x9a\x6f\x79\xac\x59\xb3\x02\x62\xe2\xb9\xd6\x81\x64\xa4\x6e\xda\xcd\xac\x33\xb8\x21\x38\xad\xb7\x77\x7c\x1c\x1f\xcf\x6e\x47\xef\xe1\xb8\xb2\x08\x52\x53\xa3\xd9\xc9\x8d\x60\xa6\xe6\xe9\x76\x36\xb9\x69\xa8\xdf\x76\x9d\xa5\xcd\xfc\xf4\xbd\xf3\xba\x42\x68\x8d\x9b\x4e\x3a\x12\xe8\x8c\xe3\x19\xa4\x98\x08\x32\xd3\x38\x83\xa8\x33\x32\x82\x73\xa8\x4f\x6e\x03\xba\xa1\xcf\x64\xa7\x70\x51\x98\x7e\xca\xd1\x15\xce\xe4\xa6\x3d\xfb\x16\x52\x85\x1e\x32\x9d\x53\x75\xe5\x10\x00\xa1\xfa\xf8\x68\xb6\x0b\x2e\x2a\x87\xf0\x27\xda\x59\x21\xca\x05\x97\xb3\x56\xc8\xa9\x23\x1d\xe9\x39\xe5\x7a\x47\xbc\x32\xd7\xbc\x20\x11\x79\x02\x8e\x3f\x8a\x51\x39\x5b\xa1\x77\xa6\x0a\xe0\x52\x4e\x1e\xae\xf4\x66\xcb\xcc\xe3\x14\x26\x44\x7e\x47\x64\x32\x39\x0a\xe1\x1d\x30\xe5\x86\x00\x65\x7a\xf1\xfc\x8b\x93\x2f\xbf\xdc\x1a\x17\x3a\x0d\xac\x99\x96\x64\x4e\x6c\x4e\x31\xd4\x9f\xd1\x29\x1b\x21\xfe\x69\x2b\x94\x54\x98\xae\xdc\x14\xe5\x2b\xfe\x2e\x60\xb2\xef\xc6\x46\xc4\x92\xbb\x0a\x89\x20\x76\xe7\xf6\x0c\x62\x4e\x76\x0f\xd1\xe1\x53\x93\x47\x07\x83\x87\xec\xae\xee\x9c\x68\x3d\xe6\x36\x81\xdc\xa5\xe4\x13\x5a\xae\x8f\xf8\x3b\x76\x7b\x7a\xf2\xfb\x93\x81\xb1\xf5\x8e\x5b\x93\xaa\xcd\x57\x58\x95\x30\x52\x86\x07\x65\x0f\x9d\x5e\xdf\x3d\x72\x4f\x21\x1a\x60\xaa\xce\x8c\x06\x0d\xc8\xed\x95\x95\x36\xaf\x4d\x25\x24\x3c\xd0\xf1\x23\x9e\xc1\x67\xf0\xbe\x83\xc3\x96\xde\x5b\x76\x4b\x07\xc9\x86\x6e\x85\x3f\xd3\xfd\x48\x70\x63\xe3\x42\xab\x15\x4f\x51\x9b\x08\x22\xa1\x16\x5c\xfa\xff\x55\x69\xc3\x41\xde\x4f\xa3\xb4\x85\xe6\xf8\xd3\x43\x74\x50\x73\x75\x09\xf1\xcf\x1d\x74\xdd\x62\xa4\x4a\x25\x4a\x3d\x70\x12\x19\x08\xf1\x3b\x52\x46\x72\x62\xc7\x83\x03\xfa\x5f\x3a\x49\xdc\x8d\x6e\x27\x86\x7c\x70\xf2\x3b\x20\xe1\x5d\xe1\xd1\xa5\xc2\xb5\xa2\x67\x4e\xcc\x1f\x49\xdd\x41\x6f\x50\x29\xce\x75\x45\x71\x5c\x30\x63\xdc\xdd\x4a\xaf\x25\x26\x0b\x6e\x35\x6b\xbe\x62\x16\xe3\x6b\xdc\xb4\x1b\xbd\xd1\x34\x2d\x94\x63\x92\x67\x87\x96\xfb\xb2\x8f\xa1\xfc\x72\x1c\x32\x78\x53\x16\x85\xd2\xd6\x67\xd4\x75\xf2\xd5\x02\xcb\x0d\xf6\xaf\x66\xb6\xf0\x7c\x87\xfd\xfc\x9a\x96\xf9\xa1\x06\xb5\x65\x33\xdc\xd8\x59\xed\xab\x1f\xd7\x78\x2a\xdb\x21\x3d\xff\xd3\x28\x79\x6f\xde\xff\xff\xab\xdd\x1e\x20\xa8\xd2\x3e\x8c\x52\x1f\x75\x79\x6f\xba\x4c\x44\x69\x2c\xea\x8f\x1f\xc8\x99\xb5\x2c\xc9\x23\x88\x82\x9b\x12\x58\x44\x10\x69\x5c\xaa\x15\xba\x2f\x04\xcd\x11\x44\x06\x6d\x59\x3c\xc6\xf5\x6d\xd2\xff\x7d\x5c\x0f\xaa\x9f\x79\x4d\x3c\x7a\x72\xe7\xf3\xc9\x7a\xb2\x8b\xba\x0f\x17\x6b\xbd\x31\x61\xfa\x18\x78\x7f\x45\x15\x7b\x90\x7c\x40\x25\x0b\xe1\xfe\x2f\x65\xfd\xe7\xf4\x47\x35\xff\x1a\x6a\xa6\x10\xf8\x69\x03\xf3\x6f\x4e\xa8\x2e\x9d\x78\x18\x99\xba\x9e\x28\x8e\x13\x16\x27\xa8\xad\x69\x4e\xa2\x5c\x1a\x4c\x4a\x8d\x75\x43\xeb\x58\x4a\xbf\x54\xec\x6e\x79\xda\x0d\xfe\xda\xed\xf1\x6c\xfc\xe9\x79\xb7\x92\x19\x5f\x7c\xfc\x84\xdb\x20\xe5\xd7\x26\x57\xeb\x08\xa2\x52\xd2\xcf\xc7\xa4\x1a\xee\x3d\xa9\x76\xda\x25\x94\x79\xc4\xed\x41\xbd\xfd\x67\xee\x32\x23\xbb\x7d\x94\xe8\x7d\x4a\xd4\x41\xc0\xa3\x48\xef\x45\xa4\x3e\x18\x3f\xc0\x25\x4a\x9a\xf6\xae\x4e\x1e\x41\x1d\xee\x1b\xd4\xc3\xdf\x48\x59\x9a\x3e\xdc\x99\xab\x2c\x52\x66\xef\xef\x98\xf5\x1b\x73\x9d\x07\xbe\xb5\xb8\xd7\x8b\x8a\xdf\x9a\x68\x1f\xf2\xb6\xe0\x7f\x4d\xa6\x7d\x29\x4e\x4f\x3f\x02\xcc\x97\x36\x8f\x20\x0a\x47\x58\xfa\xe6\x42\x78\x73\x79\x1e\x0e\x83\xef\x81\x7e\xb2\xf2\xf0\xae\xa1\x52\x8a\x1f\xd7\xd4\x7f\x84\xd5\x0e\xba\x3c\x84\xc3\xd7\x2c\xe5\xda\x75\xba\x5e\x5f\xe8\xfb\xfa\xd5\xc5\x74\xb2\xf7\x0f\xb9\x07\xae\x2c\x34\xd6\x20\xb8\xc4\x67\x90\xaa\x6d\xaa\x4f\xa6\xfb\xd1\x84\x3a\x7d\xf9\x84\x44\xf8\x0a\xbe\xda\x27\x19\x55\xe5\x23\xe4\xff\x10\xc7\x75\xa5\xd1\x17\xad\xf2\x1a\xcf\x51\x87\xd6\xcd\xd6\x02\xad\x22\xfe\x6e\x29\xc6\x2b\x57\x15\x15\x16\xa9\x46\x47\xb0\x83\xc2\x07\xee\x6e\x4b\x2c\x77\xd9\x5d\x98\x17\xd3\xbc\x81\x4d\x76\x99\xff\xb1\x66\x7b\xbb\x96\x86\xa3\xdf\xc4\x16\x27\x8d\xd1\xff\x52\x91\xcf\xce\xc9\x6e\xf6\x18\xa4\x6a\x57\x89\x55\xe5\x70\x7e\x02\x02\x72\x57\x84\xe9\x6c\x0c\x94\x6e\xd7\xe9\xdd\x8f\xbf\x0f\xdf\x13\xf8\x9a\xc5\x81\xdb\x82\x96\x84\x34\x5f\xe4\x16\xa4\x5a\x0f\xcc\x77\x75\x30\xae\x90\x4a\x20\x5b\xa1\xab\xb5\x75\xf5\xd2\xca\xa2\xb4\x9c\xbc\x46\x69\x48\xd1\x62\x62\x5d\xf5\x90\xdb\x9f\x2b\xa9\xb1\xec\x1a\x61\xc5\x44\x89\x06\xe6\xa5\x75\xb5\x8b\x06\x0b\xa6\x5d\xb1\x9f\xe0\xd7\xfd\xca\x9a\x31\xc4\xb1\xe3\xce\x4d\x03\x2e\x8d\x25\x43\x72\xaf\x19\xa8\x7d\xea\xda\x07\xa6\xad\x71\x4f\xa3\xab\xf5\x5a\x2b\xad\x37\x4d\x4d\x53\x75\x33\xb2\x75\x29\x02\x36\x77\xb5\xe0\x46\x01\xb7\x7b\x06\x0c\xcb\x10\xac\x02\xbe\x90\x2a\xbc\x84\xe8\xad\xf2\x61\xf7\x26\x04\x1d\x7d\x45\x3c\xfc\x9d\xcb\x80\xd0\xa4\xea\x17\x70\x92\x44\x9c\xeb\x91\xf0\x0a\x65\x0c\x9f\x0b\xec\x19\x6b\x97\x0e\x97\xe4\xef\x02\x4a\xc3\x16\x78\xd4\x3c\x00\x09\x35\xf1\x46\xb9\xd7\x24\x65\x11\x9e\x5c\xb4\xeb\xef\xc3\xa2\x56\xb5\x8b\x51\x8f\x9c\x22\x4d\xa9\x71\xf0\xfe\x6a\x0c\xb9\x5a\xc3\x1a\x61\xcd\xa4\xa5\xa9\x5e\x34\xc3\x4a\x7b\xf0\x6c\xb8\x79\x2b\xb2\xa3\x1c\x7e\xf2\x75\x8d\x20\x3b\xea\xf7\x7e\xf7\x65\xe8\x0f\x8d\x50\xca\xd2\x60\xeb\x81\x4d\xa8\x64\x3b\x72\xef\xc2\x80\x9b\x6a\x40\xfd\x4c\x23\x84\xa6\x52\xfb\x11\xee\x1d\x89\x7f\x74\xd5\xa9\xec\x0c\xcb\x90\x4e\x3a\xed\x4e\x39\x5a\x29\x4b\xd3\x33\xfe\xce\xd3\x6c\x97\x84\x46\x6e\x4b\x61\x23\x75\xe9\x76\x1d\xfc\xc6\x5b\xa5\xc8\xdd\x47\x3b\x73\x66\xf2\x16\xd0\x43\xc1\x92\x6b\xb6\xc0\x50\x25\xff\x1a\xe6\x28\x38\xae\x10\x96\xa5\xb1\x81\xdc\xdc\x83\x03\x13\x02\xd3\x1a\x54\xc4\xc6\x57\x0c\xba\x57\x99\x4e\xd0\xc3\x4f\x02\x63\x09\xd1\xf4\x2c\x1a\x94\xc7\x68\x40\x43\x17\x96\x69\xdb\xad\x4d\x04\x25\x61\x8f\x90\x78\x2f\x14\x29\x86\xb7\x39\x87\x75\x3c\x70\x14\xc8\x02\xea\x08\x10\x2b\xc7\x59\xc8\x70\xe8\x67\xeb\xab\x54\xbe\xc8\x3f\x7e\xd5\x79\x5e\xe4\x88\xfc\x3b\x00\x00\xff\xff\xba\x2b\xe3\x61\x6d\x3a\x00\x00")

func completionShBytes() ([]byte, error) {
	return bindataRead(
		_completionSh,
		"completion.sh",
	)
}

func completionSh() (*asset, error) {
	bytes, err := completionShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "completion.sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"completion.sh": completionSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"completion.sh": &bintree{completionSh, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

