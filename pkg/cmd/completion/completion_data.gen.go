// Code generated by go-bindata DO NOT EDIT.
// sources:
// completion.sh
package completion

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _completionSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x1c\x6b\x73\x1b\xb7\xf1\x3b\x7f\xc5\xe6\xc8\x89\x24\x5b\x27\x4b\x69\xbe\x54\x36\x35\x49\xfc\x68\x3d\x4d\xe2\x8c\xd5\xb4\xd3\xaa\x9a\x1b\xf0\x6e\x8f\x87\x08\x04\xae\x00\x8e\x34\xa3\xea\xbf\x77\x16\xb8\x37\x8f\xb2\x94\x38\xa6\x9b\x8a\x33\x99\x50\x78\x2c\x16\xfb\xde\x25\xd6\xe3\xcf\x9e\xcc\xb8\x7c\x32\x63\x26\x1b\x8d\xc6\x10\x45\x49\xac\x4c\xf4\x2c\x43\x91\xa3\x86\xb4\x90\xf1\x19\x0d\xfb\xd1\x58\x70\x30\xc5\x2c\x56\x8b\x05\x93\xc9\xd9\x68\x54\x2e\x4f\x70\x56\xcc\xf7\x0f\xe0\x7a\x04\x00\xc0\x53\xb8\xb8\x80\x50\xc2\xe4\xfa\xc5\xf3\x37\xe7\xd1\xf3\x37\xdf\xfd\x10\xbd\x78\xf9\xcd\x8f\x7f\x8a\x5e\xbd\xfe\xf6\xe5\x0d\x5c\x5e\x3e\x05\x9b\xa1\x74\xab\xe9\x83\x71\xa6\x20\x98\x5c\xbf\xfa\xf1\xfb\xe7\xdf\x7f\xfd\xdd\xcb\x8b\x93\xcb\x9b\x53\x98\x3c\x0a\xe0\xec\x8c\xc6\x07\xc1\x04\x6e\x7b\xca\x47\x37\x23\xc2\xfc\x79\x86\xf1\x95\xa1\xc3\x99\x04\xa6\x35\x5b\x83\x4a\x5b\xd8\x1a\x88\x95\xb4\x8c\x4b\x03\xac\x35\x7c\x34\x1a\x83\x61\x73\x3c\xad\xae\x5e\xad\x8a\x9a\x35\xf0\x2c\x5e\x24\x67\xf0\xcc\x41\x35\x91\x4a\x5b\x73\xe6\x6c\x74\xcb\xc6\x9a\x26\x42\xc5\x4c\x80\x41\xbc\xe2\x72\x3e\x9d\x9c\x3c\x05\x93\xf1\xd4\xb6\xe6\x34\x9a\xe9\x89\xbf\x92\xd2\x10\x2f\x92\xa7\x90\xa8\x9a\x42\x9e\xa6\x93\x78\x91\xc0\x74\x0a\xc1\xa4\x84\x14\x6c\xd2\x92\x3e\x04\xeb\xb8\x33\x32\xd3\xc8\xae\xea\x91\x94\xbb\xaf\x89\x92\x38\xf2\xeb\x6d\xa1\x25\x4c\x34\x9a\x92\x9a\xe7\x5c\xc6\x08\xd1\x1c\x6d\x14\xab\x45\x1e\xad\x94\x4e\x4c\x34\x5b\x47\x1a\x53\xe0\x06\xa4\xb2\xc0\x96\x8c\x0b\x36\x13\x08\x5c\xc2\xcf\x26\x1b\x8d\x61\x85\x20\x11\x13\x60\x90\x2b\x6d\x31\x81\x25\x6a\xc3\x95\x04\x9b\x31\x0b\x31\x93\x30\x43\x30\xaa\xd0\x31\x26\xb0\xca\x50\x42\x61\xb8\x9c\xd3\xee\xa3\x51\x4b\x6e\xfe\x79\xfe\xe7\xe8\x6f\x2f\xdf\x9e\xbf\x7e\xf3\xfd\xe9\x63\x83\x96\x64\x06\x3e\xff\x1c\x3e\x03\xbb\xce\xb7\xe2\x75\xf6\x24\xc1\xe5\x13\x59\x08\x01\x5f\x9c\x7d\x7e\x52\x12\x66\xcb\xe2\x9a\x35\xf4\x59\x65\x5c\x20\x5c\xc0\x64\x0c\xe1\xdc\xc2\x31\x5c\x76\xa8\x5f\x7d\x62\x66\x10\x82\xc9\x49\x00\x5c\x6e\x4e\x16\xfa\x60\x63\xb0\x35\x39\x9d\x5c\x3b\x11\xfe\xfb\x9b\xb7\x2f\xce\x2f\xdc\xd7\xe7\xf4\xfd\xf2\x66\xeb\xae\xa7\x4f\x37\xa6\x72\x8d\xcb\xed\xc7\xd0\xec\xb6\x73\xc2\x93\xfb\x9d\xe4\xa8\xb5\xfd\x28\x37\x3d\xdd\x0f\x3a\xa7\x7d\x75\x79\x13\x6c\xdf\x32\x70\x48\x4c\x60\x6e\x21\x1b\x4d\x4f\x27\xcd\x25\xee\x03\x3b\x94\xdb\x01\x8f\x81\x19\x53\x2c\x10\x6a\xe4\xbf\x79\xfb\xf2\xeb\xbf\x9c\x93\x6c\x33\xa1\x91\x25\x6b\x30\x68\xc1\x30\x89\x62\xbd\x15\x4c\xa3\xc4\x77\xc4\x09\x0d\x8b\x37\x06\xbb\x50\x9c\x56\xde\x8c\x52\xee\x14\xf1\x05\xa6\xac\x10\x16\x66\x98\xb1\x25\x57\x1a\xac\x82\x39\x5a\x12\x6d\x90\xf8\xce\x42\x65\x6a\x52\xad\x16\x6e\x34\x2e\xb4\x46\x59\x4f\x1c\xc1\x6b\xe9\xc7\x49\x78\x55\x0a\x61\x48\xc6\x1d\x68\xcf\x82\xad\x67\x08\xca\x66\xa8\xc1\x70\x5b\x30\xcb\x95\x34\xa3\x31\x29\x34\x6d\x49\x0b\x5b\x68\xf4\xca\x6b\x32\x55\x88\x04\x50\x26\x04\x39\x17\x48\x6b\x0f\xc1\x66\xdc\x94\xf6\xc3\xc0\xc9\xa1\x07\xb6\xe2\x06\xe1\x78\x34\x1e\x8d\xe1\x6b\x47\x66\xb2\xb9\x93\x0a\xd3\x25\xd3\xdc\x99\x0d\x7c\xc7\x8d\x35\xd5\x61\x31\x13\x82\x6c\x01\xd9\x51\xba\x98\x3b\x75\xc5\x85\xa8\x0c\xb7\x47\x49\x15\x32\x69\xd9\xef\xde\x11\xf7\x02\xce\x4d\x9b\x60\x64\xbe\x94\x4e\x60\x86\xb4\x10\x97\x4c\x14\x8c\x4c\x58\x4d\x58\x2e\xf3\xc2\x82\xb1\x9a\xe6\xf7\xdd\xc5\xb9\x81\x04\x53\x2e\x31\xa1\x83\x4a\x47\xb0\x20\x5c\x8d\x2a\x29\x26\xf7\x88\x79\x64\x11\xb5\x9a\x09\x5c\x1c\x34\x4e\xd3\x71\x36\x2a\x2f\x12\xe5\x4c\x1b\xac\xad\x52\x65\x91\x82\x49\x1c\x40\x28\x2c\x7d\x21\xf4\x82\x9e\x69\xe2\xd3\x60\x72\xed\x74\xf1\x22\xbe\x2c\x7d\x22\x34\xa6\x8a\x6f\x98\x2a\xcf\xfe\xff\x84\xd9\xa6\x72\x8c\xc9\xcd\x38\xe1\x20\x2d\x80\x54\xb0\xf9\x21\xc4\x6a\xa6\x19\x18\xab\x72\x03\x84\x22\x5d\x9e\x2f\x16\x98\x70\x66\x51\xac\xe9\xa2\x2b\xac\x3c\x48\x86\x1a\x37\xc0\x96\x73\x27\x1b\x13\x3d\xfd\x08\x1f\x1d\xf4\x87\x1e\x6d\x22\x59\x92\x6b\x4a\x77\xdb\xd4\xaf\x31\xc9\x00\x37\x80\x69\x8a\xb1\xe5\x4b\xc2\x70\x2e\xd4\x8c\x9c\xaf\x2a\x45\x8a\xad\x81\x7b\x67\x14\x6b\xb6\x12\x60\x33\xad\x8a\x79\xe6\x78\xcc\xf4\xbc\x58\xa0\xb4\x06\x98\x17\x8e\x5c\xab\xb9\x66\x8b\x81\x83\x24\x5b\xf2\x39\xb3\x68\x4a\x55\x91\xb1\x75\x9e\x4e\x23\x3a\xe5\x32\x8a\x70\x71\x02\xcc\xc4\x8a\xad\x0d\x89\x41\xad\xb6\x85\x24\x23\xe3\x24\x6e\x00\x36\x4b\x2d\x45\x5f\x5c\x26\x44\xee\xbe\xae\x1f\x12\xc5\xb9\x8c\x35\x12\xaa\x74\xca\x0c\x53\xa5\xd1\x7b\x79\xda\xa1\x0a\x4b\xaa\x4e\x1b\x85\x52\xf9\xc6\x09\xfb\xfb\xf1\xe3\xc7\x07\x9b\xc4\xed\x86\x09\x03\x7c\xea\xd8\xaf\x36\x94\x7e\x2c\x71\x4c\x81\x44\x29\xe9\x19\x93\x89\x40\xe7\x83\x35\xe6\x62\x5d\x0b\x79\x3b\x7c\x84\xa0\x31\x2b\xc6\x05\x7f\xa3\x56\x74\xc4\xa7\xc7\xa3\x26\x38\xaa\x17\x92\xd6\x05\x93\xaf\x82\x8e\x4a\x8c\x21\xe5\x82\xe8\x47\x54\x68\x01\x25\x9d\x8a\x33\xc2\x74\xcf\xc2\x82\xd9\x38\xeb\xd8\xcb\x0e\x2b\xaa\x78\xab\x39\xc9\x85\x5d\x71\xa1\x83\x47\xc3\x31\xd7\x18\x62\x8a\x40\x69\xa7\x83\xda\xec\x54\x69\x8a\x9a\x2c\x44\xa5\x54\x5e\x0e\x59\x1c\x63\x4e\x82\x26\x6b\xa9\x2b\x31\xe4\x06\x16\x4c\x5f\x61\x02\xb3\x35\x4d\x4f\x7b\x07\xf1\x14\x8c\x3a\xa4\x30\x36\x67\x31\x56\xe1\xd8\x82\xc9\x82\x09\xb1\x06\x96\x24\x98\x80\x71\x11\x1c\xa1\x52\x18\xd4\x4e\x27\xde\xe5\x18\x93\x45\xb3\x8a\xd6\x40\x5a\x68\x67\xf9\x9d\x5d\xeb\x1c\x51\x1a\x8f\xe6\x0e\x83\x01\x4f\x18\x3e\x9a\x0e\x28\x28\x7d\xc8\xab\xbe\x7d\xf9\xc3\xb7\xff\xb8\xe0\x8f\x1f\x5f\x4e\x3b\xa0\x06\x37\x0c\xb8\xca\xfb\x83\x86\x3b\xc1\xee\x88\x70\x3b\x12\xbe\x71\x69\x04\x13\xc2\x78\x6d\x6b\xc5\xf1\xb3\x35\xa8\x42\xb7\xbd\xc8\x12\xa5\x13\x2a\xca\x1f\xfe\xfa\xe6\xc5\x9b\xd3\x86\x89\x4e\xdc\xdd\x32\x26\x9d\xd5\x67\x33\xb1\x26\xe5\xa7\x53\x60\x41\x8a\x8a\xef\x72\xc1\x63\x6e\xc5\x9a\xb6\x93\x27\x61\xa5\x13\xf3\x3e\x4e\x08\xb5\x22\x08\x95\x37\x33\xde\x9d\xf5\xbd\x99\x89\x55\xee\x8d\x0d\xd3\x24\x72\x5a\x63\x6c\x4f\x47\xe3\xca\x50\x98\xd3\xe1\x4c\xc8\xf9\xae\xda\x62\x65\x4a\x24\xa6\xd9\x74\x5a\xc9\xaf\xbb\xb9\x55\xee\x34\xe0\xd2\xaa\x9e\x3e\x37\x10\x9d\x42\x8f\x6a\xe1\x64\xf5\xee\x15\x33\x30\xe7\x4b\x94\x87\xa5\x76\x78\xbf\xeb\x5c\x2f\xc9\x7d\x6c\x0b\x26\xea\xd5\xf4\x9f\x3b\xcc\x59\x62\x63\x54\xcc\xbd\x07\x2e\x31\x6d\x67\x47\x5e\xf3\xaf\xab\x2b\xb9\xc8\xf3\xd6\x8c\xa9\x5c\xb9\x25\x63\xea\x5a\xa2\x7e\x90\x71\xea\xe0\x94\x06\xa9\xfa\x94\x29\x5d\x23\x24\x24\x34\x95\x37\xef\x69\xac\x59\xb1\x1c\x42\xc2\xb9\xe6\x81\x64\xc4\x6e\xba\x4d\xd4\x59\xdc\x00\x9c\xd6\xd7\x7b\xf2\x24\x7c\x12\xdd\x8c\x6e\xc1\xb8\x92\x08\x62\x53\xc3\xd9\xc9\xb5\x60\xa6\xc6\xe9\x26\x9a\x5c\x37\xd0\x6f\xba\xca\xd2\x46\x7e\x7a\xeb\xbe\x2e\x11\x5a\xeb\xa6\x93\x0e\x05\x3a\xeb\x78\x0a\x09\xc6\x82\xc4\x34\x4c\x21\xe8\xac\x0c\xe0\x0c\xea\xcc\x6d\x80\x37\xf4\x99\x6c\x25\x2e\x0a\xb3\x19\x72\x74\x89\x33\xb9\x6e\xef\xbe\x81\x44\xa1\x37\x99\x4e\xa9\xba\x74\x28\x0d\x42\xf5\xf1\xde\x6c\x9b\xb9\xa8\x14\xc2\x67\xb4\x51\x2e\x8a\x39\x97\x51\xcb\xe5\xd4\x9e\x8e\xf8\x9c\x70\xbd\xc5\x5f\x99\x2b\x9e\x13\x89\x3c\x00\x87\x1f\xf9\xa8\x8c\x2d\xd1\x2b\x53\x65\xe0\x12\x4e\x1a\xae\xf4\xba\x27\xe6\x61\x02\x13\x02\xbf\xc5\x33\x99\x0c\x85\xf0\x0a\x98\x70\x43\x06\x65\x7a\xfe\xfc\x8b\xe3\x2f\xbf\xec\xad\x2b\x27\x0d\xac\x98\x96\x24\x4e\x6c\x46\x3e\xd4\xe7\xe8\x14\x8d\x10\xfe\x74\x15\x0a\x2a\x4c\x97\x6e\x8a\xe2\x15\x5f\x0b\x98\xec\xbb\xb5\x01\xa1\xe4\x2a\x4b\x01\x84\x2e\x6f\x4f\x21\xe4\x24\xf7\x10\x3c\x3a\x32\x59\x70\x30\x98\x64\x77\x79\xe7\x48\xeb\x6d\x6e\xe3\xc8\x5d\x48\x3e\xa1\xe3\x36\x2d\xfe\x96\xdb\x9e\x1c\xff\xf1\x78\x60\x6d\x7d\xe3\xd6\xa6\xea\xf2\x95\xad\x8a\x19\x31\xc3\x1b\x65\x6f\x3a\x3d\xbf\x37\xc0\x1d\x41\x30\x80\x54\x1d\x19\x0d\x0a\x90\xbb\x2b\x2b\x6c\xd6\x2b\x15\x71\xe8\xe8\x11\x4f\xe1\x33\xb8\x2d\x71\xe8\xf1\xbd\x25\xb7\x94\x48\x36\x70\x2b\xfb\x33\xdd\x0f\x04\x37\x36\xcc\xb5\x5a\xf2\x04\xb5\x09\x20\x10\x6a\xce\xa5\xff\xbf\x2a\x6c\x99\xc8\xfb\x6d\x14\xb6\xd0\x1e\x9f\x3d\x04\x07\x35\x56\x17\x10\xfe\xdc\xb1\xae\x3d\x44\xaa\x50\xa2\xd0\x03\x99\xc8\x80\x8b\xdf\x12\x32\x92\x12\x3b\x1c\x9c\xa1\x7f\x5f\x26\x71\x3f\xb8\x1d\x1f\x72\xe7\xe0\x77\x80\xc2\xdb\xdc\xa3\x0b\x85\x6b\x46\x47\x8e\xcc\x1f\x89\xdd\x25\xdf\xa0\x62\x9c\x9b\x0a\xc2\x30\x67\xc6\xb8\xda\xca\xc6\x48\x48\x12\xdc\x1a\xd6\x7c\xc9\x2c\x86\x57\xb8\x6e\x0f\x7a\xa1\x69\x46\x28\xc6\x24\xcd\x2e\x47\x3e\x94\x7c\x0c\xc5\x97\xe3\x32\x82\x37\x45\x9e\x2b\x6d\x7d\x44\x5d\x07\x5f\x2d\x63\xb9\xc6\xcd\xd2\x4c\xcf\x9e\x6f\x91\x9f\xdf\x52\x32\xef\x2a\x50\x3d\x99\xe1\xc6\x46\xb5\xae\x7e\x5c\xe1\xa9\x64\x87\xf8\xfc\x93\x51\xf2\x83\x69\xff\xff\x2f\x77\x37\x0c\x82\x2a\xec\x6e\x98\xfa\xc0\xcb\x0f\xc6\xcb\x58\x14\xc6\xa2\xfe\xf8\x8e\x9c\x59\xcb\xe2\x2c\x80\xa0\x54\x53\x32\x16\x01\x04\x2a\x47\xf2\xe6\x1a\x17\x6a\x89\xee\x0b\x59\xe8\x00\x02\x83\xb6\xc8\x1f\xdc\x7b\x1f\xf4\xaf\x72\xef\xd5\x6f\x80\x4e\xa6\xb1\x92\x85\xc8\x65\x79\x3d\x89\x70\x63\xd3\x7d\x7f\x09\x5f\xe7\x7d\xfd\xea\x7c\x3a\xd9\xfb\x97\xdc\x03\x57\x15\x0c\x35\x08\x2e\x91\xc2\x63\xe8\x40\x7a\x3c\xdd\x0f\x26\x34\xe5\x63\x67\x89\xf0\x0c\x9e\xed\xd3\xd1\xd5\x3a\x20\xe6\x43\x18\xfa\xf4\xf2\x8b\x56\x66\xe5\xcf\x6b\xc0\x5c\x77\x20\xb7\x7e\xba\xe9\x06\xe0\xaf\x5c\x2e\x5c\x41\xf7\x60\x29\xdb\x7d\xfd\x82\x42\xc6\x21\x28\x03\xc4\xea\x30\xa4\xb5\xb2\xaf\x3b\x91\x17\xe5\x07\x53\xd8\xf9\xec\xde\x14\x6e\x83\x3b\x2c\xef\xbf\x50\xc9\x36\x84\x81\x44\x79\x77\xa1\x8e\x17\x45\x4c\x1e\xe2\x9e\xdf\xce\x57\x46\xe4\xa3\xfe\xb7\xb5\xfd\x77\xa6\x73\x3e\x5a\xd8\xa1\xd6\x09\xe1\xfe\x5f\xc8\xfa\x79\xc9\x83\xde\x6d\x83\xbc\x3b\x21\x21\x70\x0f\x7a\xfb\x09\xb1\xc4\xc5\xf4\xbb\xe1\x88\x9b\x09\xc2\x30\x66\x61\x8c\xda\x9a\xa6\x2a\xc4\xa5\xc1\xb8\xd0\x58\x0f\xb4\x4a\x44\xf4\x97\x0a\x5d\xc5\xb5\x3d\xe0\x4b\xe0\x0f\x75\xaa\x9d\x5b\x96\xbb\xcb\x61\x5f\xbc\x95\x4c\xf9\x3c\xba\xc2\x75\x3f\xf1\xa1\xa1\xbb\xe7\x3d\x0d\x98\xdb\xb2\x1e\xb7\xca\x41\x86\x30\xfc\x77\xc1\xd1\x0e\x24\x3d\x35\x90\xeb\x16\xd4\xf7\x65\x3c\x0d\x64\x9f\xe7\xf4\x76\xbe\x2f\xcb\x69\x16\x36\xba\xea\x40\x7c\xfc\xfa\x80\x41\x4b\x59\x7f\xa6\x56\x01\x04\x85\xa4\x3f\x7f\x8f\xc9\xff\x90\x04\xfe\x42\xf3\x3a\xc0\xdc\xf7\xe4\xfb\xef\x11\x7a\x6f\x7f\x62\xa5\xf1\xc8\xd7\xfd\x62\x13\x59\x75\x85\x95\xa5\x6b\x66\x0a\x2d\xda\x63\x0b\x34\xee\x49\x99\x33\xf2\xbd\xb9\x9c\xcd\xb9\x64\xcd\xa3\x0a\x3f\x6a\x8c\x88\x96\xa8\x79\xba\x6e\x8f\x5a\xbe\x40\x55\xd8\xee\xc2\x2c\x22\x7b\xd8\x1f\xcb\xb5\x7a\xb7\x8e\x78\xde\x1e\xd7\x48\x36\x8c\xcb\x79\xe7\x7c\xad\x16\xb9\xf5\xbf\x67\x54\xe3\xde\x1d\x1d\xb9\x4a\x93\x1f\xfa\x49\xcd\x8e\x1a\xc4\xe9\x2f\x83\x7a\xc9\x63\x8c\x5a\x8b\x16\x4c\x33\x9b\x29\xd9\x5a\x99\xb3\xf8\x8a\xcd\xf1\x28\x56\x66\xd1\xa6\xcb\xc1\x2f\xd6\x3c\x72\x92\x0f\x41\xcb\xae\x74\x6a\x83\x19\x99\x5a\x3d\x70\xe3\x53\xe1\x86\x73\x0b\x0f\xec\xd8\x39\x3b\x7c\xfc\xbb\x83\xdf\x10\x92\xa4\xf9\xe5\xa0\xfc\xc9\xe0\xf7\x18\x24\xec\xf8\x01\x40\xf9\x44\x88\x25\xc9\xee\x4a\x2c\x45\x9e\x30\xfb\xe1\xaa\x2a\x9f\x4c\x4d\xb1\xa4\xed\x6e\xab\xc6\x1f\xb4\x50\xfc\xa9\x91\x76\x97\xc5\xc1\x4f\x9e\xa6\x1b\x2b\xfc\x35\x3c\xe9\xea\xbc\xb7\xfd\x79\x6f\x0e\x5c\x92\x9d\x27\xb7\xa5\xc0\xe5\xa3\xc1\xf2\x77\xbf\x6d\x29\x70\xfb\x53\xa2\xe4\x33\xe2\xe6\x8c\x2d\xdd\x5b\xb7\x90\xa7\x04\xf4\x6b\xec\x66\x25\x62\x9b\x42\x35\x3d\xf9\x08\x5e\xaf\xb0\x59\x50\x67\x2d\xf4\xcd\x79\xf2\xe6\xa7\xf4\xb2\x1c\x75\x8b\x27\x24\xa5\x2f\xbb\x1c\x2b\x19\x6d\x33\x3e\x6a\x4e\x3b\xe8\xe2\x50\x96\x7f\xa2\x84\x6b\x37\x39\xba\x8f\x48\x54\x50\xef\x2c\x17\xf5\xbb\xe3\x4d\xd1\xe8\xc0\xba\xee\x1d\xf0\x9e\x2a\x49\x79\x48\xb5\x3a\x80\x2d\x10\xee\x78\xbb\x1e\x59\xee\x73\xbb\x72\x5f\x48\xfb\x06\x2e\xd9\x45\xfe\x87\x1a\xed\xfe\xcb\x5a\x8e\x55\xb9\xa7\x83\xc9\x46\xc9\x67\xeb\x93\xdf\xad\x9b\xdd\xee\x31\x48\xd5\x7e\x33\x5e\x3d\x8e\x2f\x23\x49\x40\xee\x5a\x32\x9c\x8c\x81\xd2\xed\x57\xfb\x1f\xc6\xfc\x0d\x57\x2a\x7d\x07\xc3\x40\xbd\xb2\x45\x21\xcd\xe7\x99\x05\xa9\x56\x03\xfb\xdd\xab\x58\xf7\xac\x5a\x20\x5b\xa2\xeb\xbc\x71\xdd\x53\xca\xa2\xb4\x9c\xb4\x46\x69\x48\xd0\x62\x6c\xdd\x5b\x62\x77\x3f\xf7\xc0\xd6\xb2\x2b\x84\x25\x13\x05\x1a\x98\x15\xd6\x75\x32\x18\xcc\x99\x76\x4f\xff\x05\xbf\xda\x7c\x67\x3b\x86\x30\x74\xd8\xb9\x6d\xc0\xa5\xb1\x24\x48\xae\xb7\x91\xc6\xa7\x6e\x7c\x60\xdb\x0a\xf7\x34\xba\x97\xdf\x2b\xa5\xf5\xba\x79\xe1\x5c\xd5\x66\x7b\x65\x59\xb0\x99\xeb\x0c\x33\x0a\xb8\xdd\x33\x60\x58\x8a\x60\x15\xf0\xb9\x54\x65\x5f\xe4\xc6\x29\x77\xab\xdc\x92\xe9\xd8\x64\xc4\xee\xab\xbe\x03\x44\x93\x6a\xb3\x9d\x83\x28\xe2\x54\x8f\x88\x97\x2b\x63\xf8\x4c\xe0\x86\xb0\x76\xe1\x70\x49\xfa\x2e\xa0\x30\x6c\x8e\x87\x4d\x3b\x68\xd9\x21\x67\x94\xeb\x2d\x2d\xf2\xb2\x01\xb3\xdd\x8d\x57\x1e\x6a\x55\xbb\x35\xe5\xd0\x31\xd2\x14\x1a\x07\x2b\xe8\x63\xc8\xd4\x0a\x56\x08\x2b\x26\x2d\x6d\xf5\xa4\x19\x66\xda\xce\x93\x83\xa6\x73\x74\x4b\x73\xdc\xe4\xab\xda\x82\x6c\x79\xcd\xff\x87\x2f\xcb\xf9\x72\x10\x0a\x59\x18\x6c\xb5\xdb\x96\xef\xda\x0f\x5d\x97\x38\x70\x53\x2d\xa8\x9b\x36\x4b\xd7\x54\x68\xbf\xc2\x75\x95\xfa\x16\xec\x4e\x9f\x47\x79\x0c\xf1\xa4\x33\xee\x98\xa3\x95\xb2\xb4\x3d\xe5\xef\x3c\xcc\x76\x83\x48\xe0\xae\x54\x5e\xa4\x6e\xe4\xaa\x9d\xdf\xb8\xd7\x98\xd4\x6d\xe1\x9d\x31\x93\xb5\x0c\x3d\x94\xf5\xc1\xb2\x67\xee\x35\xcc\x50\x70\x5c\x22\x2c\x0a\x63\x4b\x70\x33\x6f\x1c\x98\x10\x98\xd4\x46\x45\xac\x7d\xff\x80\xfb\x27\x2f\x1c\xa1\x87\xff\x81\x80\x50\x42\x30\x3d\x0d\x06\xe9\x31\x1a\xe0\xd0\xb9\x65\xae\x42\xda\x69\xfd\x93\xb0\x47\x96\x78\xaf\x6c\x59\x28\x3b\x75\x1f\xd5\xfe\xc0\x41\x20\x09\xa8\x3d\x40\xa8\x1c\x66\x65\x84\x43\x7f\xb6\xbe\x4a\xe5\x5b\xfe\xc2\x57\x9d\x66\x63\x07\xe4\xbf\x01\x00\x00\xff\xff\x26\x66\x63\x8b\xca\x43\x00\x00")

func completionShBytes() ([]byte, error) {
	return bindataRead(
		_completionSh,
		"completion.sh",
	)
}

func completionSh() (*asset, error) {
	bytes, err := completionShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "completion.sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"completion.sh": completionSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"completion.sh": &bintree{completionSh, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
