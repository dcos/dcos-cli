// Code generated by go-bindata DO NOT EDIT.
// sources:
// completion.sh
package completion

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _completionSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5b\x79\x73\x23\xb7\xb1\xff\x9f\x9f\xa2\x3d\x64\x59\xc7\x6a\x56\x92\x9f\xff\x79\xda\xa5\xca\xf6\x1e\xef\x6d\xc5\xf6\xba\x56\x71\x52\x89\xa2\x62\x81\x33\x3d\x1c\x44\x20\x30\x05\x60\xc8\xa5\x15\x7d\xf7\x54\x03\x98\x8b\x33\x94\x57\x15\x79\xe5\x24\x62\xd5\xd6\x52\x38\x1a\x8d\x3e\x7e\xdd\x00\x1b\xe3\x2f\x8e\xe7\x5c\x1e\xcf\x99\xc9\x47\xa3\x31\xcc\x66\x69\xa2\xcc\xec\x65\x8e\xa2\x40\x0d\x59\x29\x93\x73\x6a\xf6\xad\x89\xe0\x60\xca\x79\xa2\x96\x4b\x26\xd3\xf3\xd1\x28\x0c\x4f\x71\x5e\x2e\xf6\x0f\xe0\x66\x04\x00\xc0\x33\xb8\xbc\x84\x58\xc2\xe4\xe6\xf5\xab\xf7\x17\xb3\x57\xef\x7f\xf8\x69\xf6\xfa\xcd\x77\x3f\xff\xdf\xec\xed\xbb\xef\xdf\xdc\xc2\xd5\xd5\x0b\xb0\x39\x4a\x37\x9a\x3e\x98\xe4\x0a\xa2\xc9\xcd\xdb\x9f\x7f\x7c\xf5\xe3\xb7\x3f\xbc\xb9\x3c\xbd\xba\x3d\x83\xc9\x61\x04\xe7\xe7\xd4\x3e\x48\x26\x72\xd3\x33\x3e\xba\x1d\x11\xe7\xaf\x72\x4c\xae\x0d\x2d\xce\x24\x30\xad\xd9\x06\x54\xd6\xe2\xd6\x40\xa2\xa4\x65\x5c\x1a\x60\xad\xe6\xe7\xa3\x31\x18\xb6\xc0\xb3\x6a\xeb\xd5\xa8\x59\x33\x06\x5e\x26\xcb\xf4\x1c\x5e\x3a\xaa\x66\xa6\xb2\x56\x9f\x39\x1f\xdd\x31\xb1\x96\x89\x50\x09\x13\x60\x10\xaf\xb9\x5c\x4c\x27\xa7\x2f\xc0\xe4\x3c\xb3\xad\x3e\x8d\x66\x7a\xea\xb7\xa4\x34\x24\xcb\xf4\x05\xa4\xaa\x96\x90\x97\xe9\x24\x59\xa6\x30\x9d\x42\x34\x09\x94\xa2\xbe\x2c\xe9\x43\xb4\x4e\x3a\x2d\x73\x8d\xec\xba\x6e\xc9\xb8\xfb\x9a\x2a\x89\x23\x3f\xde\x96\x5a\xc2\x44\xa3\x09\xd2\xbc\xe0\x32\x41\x98\x2d\xd0\xce\x12\xb5\x2c\x66\x6b\xa5\x53\x33\x9b\x6f\x66\x1a\x33\xe0\x06\xa4\xb2\xc0\x56\x8c\x0b\x36\x17\x08\x5c\xc2\x2f\x26\x1f\x8d\x61\x8d\x20\x11\x53\x60\x50\x28\x6d\x31\x85\x15\x6a\xc3\x95\x04\x9b\x33\x0b\x09\x93\x30\x47\x30\xaa\xd4\x09\xa6\xb0\xce\x51\x42\x69\xb8\x5c\xd0\xec\xe7\xa3\x96\xdd\xfc\xf5\xe2\xff\x67\x7f\x7a\xf3\xe1\xe2\xdd\xfb\x1f\xcf\x9e\x19\xb4\x64\x33\xf0\xe5\x97\xf0\x05\xd8\x4d\xb1\x93\xaf\xf3\xe3\x14\x57\xc7\xb2\x14\x02\xbe\x3a\xff\xf2\x34\x08\x66\xc7\xe0\x5a\x35\xf4\x59\xe7\x5c\x20\x5c\xc2\x64\x0c\xf1\xc2\xc2\x09\x5c\x75\xa4\x5f\x7d\x12\x66\x10\xa2\xc9\x69\x04\x5c\xf6\x3b\x4b\x7d\xd0\x6b\x6c\x75\x4e\x27\x37\xce\x84\xff\xfc\xfe\xc3\xeb\x8b\x4b\xf7\xf5\x15\x7d\xbf\xba\xdd\x39\xeb\xc5\x8b\x5e\x57\xa1\x71\xb5\x7b\x19\xea\xdd\xb5\x4e\x7c\x7a\xbf\x95\x9c\xb4\x76\x2f\xe5\xba\xa7\xfb\x51\x67\xb5\x6f\xae\x6e\xa3\xdd\x53\x06\x16\x49\x88\xcc\x1d\x62\xa3\xee\xe9\xa4\xd9\xc4\x7d\x68\xc7\x72\x37\xe1\x31\x30\x63\xca\x25\x42\xcd\xfc\x77\x1f\xde\x7c\xfb\x87\x0b\xb2\x6d\x26\x34\xb2\x74\x03\x06\x2d\x18\x26\x51\x6c\x76\x92\x69\x9c\xf8\x13\x79\x42\xc3\x92\x5e\x63\x97\x8a\xf3\xca\xdb\x51\xc6\x9d\x23\xbe\xc6\x8c\x95\xc2\xc2\x1c\x73\xb6\xe2\x4a\x83\x55\xb0\x40\x4b\xa6\x0d\x12\x3f\x5a\xa8\xa0\x26\xd3\x6a\xe9\x5a\x93\x52\x6b\x94\x75\xc7\x73\x78\x27\x7d\x3b\x19\xaf\xca\x20\x8e\x09\xdc\x81\xe6\x2c\xd9\x66\x8e\xa0\x6c\x8e\x1a\x0c\xb7\x25\xb3\x5c\x49\x33\x1a\x93\x43\xd3\x94\xac\xb4\xa5\x46\xef\xbc\x26\x57\xa5\x48\x01\x65\x4a\x94\x0b\x81\x34\xf6\x08\x6c\xce\x4d\xc0\x0f\x03\xa7\x47\x9e\xd8\x9a\x1b\x84\x93\xd1\x78\x34\x86\x6f\x9d\x98\x09\x73\x27\x15\xa7\x2b\xa6\xb9\x83\x0d\xfc\xc8\x8d\x35\xd5\x62\x09\x13\x82\xb0\x80\x70\x94\x36\xe6\x56\x5d\x73\x21\x2a\xe0\xf6\x2c\xa9\x52\xa6\x2d\xfc\xde\x5a\xe2\x5e\xc4\xb9\x69\x0b\x8c\xe0\x4b\xe9\x14\xe6\x48\x03\x71\xc5\x44\xc9\x08\xc2\x6a\xc1\x72\x59\x94\x16\x8c\xd5\xd4\xbf\xef\x36\xce\x0d\xa4\x98\x71\x89\x29\x2d\x14\x02\xc1\x92\x78\x35\x2a\x48\x4c\xee\x91\xf2\x08\x11\xb5\x9a\x0b\x5c\x1e\x34\x41\xd3\x69\x76\x16\x36\x32\x2b\x98\x36\x58\xa3\x52\x85\x48\xd1\x24\x89\x20\x16\x96\xbe\x10\x7b\xd1\x16\x34\xf1\x69\x34\xb9\x71\xbe\x78\x99\x5c\x85\x98\x08\x0d\x54\xf1\x1e\x54\x79\xf5\xff\x23\xce\xfb\xce\x31\xa6\x30\xe3\x8c\x83\xbc\x00\x32\xc1\x16\x47\x90\xa8\xb9\x66\x60\xac\x2a\x0c\x10\x8b\xb4\x79\xbe\x5c\x62\xca\x99\x45\xb1\xa1\x8d\xae\xb1\x8a\x20\x39\x6a\xec\x91\x0d\x7d\xa7\xbd\x8e\x2d\xff\x88\x0f\x0f\xb6\x9b\x0e\xfb\x4c\x06\x71\x4d\x69\x6f\x7d\xff\x1a\x93\x0d\x70\x03\x98\x65\x98\x58\xbe\x22\x0e\x17\x42\xcd\x29\xf8\xaa\x60\x52\x6c\x03\xdc\x07\xa3\x44\xb3\xb5\x00\x9b\x6b\x55\x2e\x72\xa7\x63\xa6\x17\xe5\x12\xa5\x35\xc0\xbc\x71\x14\x5a\x2d\x34\x5b\x0e\x2c\x24\xd9\x8a\x2f\x98\x45\x13\x5c\x45\x26\xd6\x45\x3a\x8d\xe8\x9c\xcb\x28\xe2\xc5\x19\x30\x13\x6b\xb6\x31\x64\x06\xb5\xdb\x96\x92\x40\xc6\x59\xdc\x00\x6d\x96\x59\xca\xbe\xb8\x4c\x49\xdc\xdb\xbe\x7e\x44\x12\xe7\x32\xd1\x48\xac\xd2\x2a\x73\xcc\x94\x46\x1f\xe5\x69\x86\x2a\x2d\xb9\x3a\x4d\x14\x4a\x15\xbd\x15\xf6\xf7\x93\x67\xcf\x0e\xfa\xc2\xed\xa6\x09\x03\x7a\xea\xe0\x57\x9b\xca\x76\x2e\x71\x42\x89\x44\xb0\xf4\x9c\xc9\x54\xa0\x8b\xc1\x1a\x0b\xb1\xa9\x8d\xbc\x9d\x3e\x42\xd4\xc0\x8a\x71\xc9\xdf\xa8\x95\x1d\xf1\xe9\xc9\xa8\x49\x8e\xea\x81\xe4\x75\xd1\xe4\x9b\xa8\xe3\x12\x63\xc8\xb8\x20\xf9\x91\x14\x5a\x44\xc9\xa7\x92\x9c\x38\xdd\xb3\xb0\x64\x36\xc9\x3b\x78\xd9\x51\x45\x95\x6f\x35\x2b\xb9\xb4\x2b\x29\x75\x74\x38\x9c\x73\x8d\x21\xa1\x0c\x94\x66\x3a\xaa\xcd\x4c\x95\x65\xa8\x09\x21\x2a\xa7\xf2\x76\xc8\x92\x04\x0b\x32\x34\x59\x5b\x5d\xe0\x90\x1b\x58\x32\x7d\x8d\x29\xcc\x37\xd4\x3d\xdd\x5a\x88\x67\x60\xd4\x11\xa5\xb1\x05\x4b\xb0\x4a\xc7\x96\x4c\x96\x4c\x88\x0d\xb0\x34\xc5\x14\x8c\xcb\xe0\x88\x95\xd2\xa0\x76\x3e\xf1\xb1\xc0\x84\x10\xcd\x2a\x1a\x03\x59\xa9\x1d\xf2\x3b\x5c\xeb\x2c\x11\xc0\xa3\xd9\xc3\x60\xc2\x13\xc7\x87\xd3\x01\x07\xa5\x0f\x45\xd5\x0f\x6f\x7e\xfa\xfe\x2f\x97\xfc\xd9\xb3\xab\x69\x87\xd4\xe0\x84\x81\x50\x79\x7f\xd2\xf0\x49\xb4\x3b\x26\xdc\xce\x84\x6f\xdd\x31\x82\x09\x61\xbc\xb7\xb5\xf2\xf8\xf9\x06\x54\xa9\xdb\x51\x64\x85\xd2\x19\x15\x9d\x1f\xfe\xf8\xfe\xf5\xfb\xb3\x46\x89\xce\xdc\xdd\x30\x26\x1d\xea\xb3\xb9\xd8\x90\xf3\xd3\x2a\xb0\x24\x47\xc5\x8f\x85\xe0\x09\xb7\x62\x43\xd3\x29\x92\xb0\x10\xc4\x7c\x8c\x13\x42\xad\x89\x42\x15\xcd\x8c\x0f\x67\xdb\xd1\xcc\x24\xaa\xf0\x60\xc3\x34\x99\x9c\xd6\x98\xd8\xb3\xd1\xb8\x02\x0a\x73\x36\x7c\x12\x72\xb1\xab\x46\xac\x5c\x89\xd4\x34\x93\xce\x2a\xfb\x75\x3b\xb7\xca\xad\x06\x5c\x5a\xb5\xe5\xcf\x0d\x45\xe7\xd0\xa3\xda\x38\x59\x3d\x7b\xcd\x0c\x2c\xf8\x0a\xe5\x51\xf0\x0e\x1f\x77\x5d\xe8\x25\xbb\x4f\x6c\xc9\x44\x3d\x9a\xfe\xb9\xc5\x1c\x12\x1b\xa3\x12\xee\x23\x70\xe0\xb4\x7d\x3a\xf2\x9e\x7f\x53\x6d\xc9\x65\x9e\x77\x9e\x98\xc2\xc8\x1d\x27\xa6\x2e\x12\x6d\x27\x19\x67\x8e\x4e\x00\xa4\xea\x13\x8e\x74\x8d\x91\x90\xd1\x54\xd1\x7c\xcb\x63\xcd\x9a\x15\x10\x13\xcf\xb5\x0e\x24\x23\x75\xd3\x6e\x66\x9d\xc1\x0d\xc1\x69\xbd\xbd\xe3\xe3\xf8\x78\x76\x3b\xba\x83\xe3\xca\x22\x48\x4d\x8d\x66\x27\x37\x82\x99\x9a\xa7\xdb\xd9\xe4\xa6\xa1\x7e\xdb\x75\x96\x36\xf3\xd3\x3b\xe7\x75\x85\xd0\x1a\x37\x9d\x74\x24\xd0\x19\xc7\x33\x48\x31\x11\x64\xa6\x71\x06\x51\x67\x64\x04\xe7\x50\x9f\xdc\x06\x74\x43\x9f\xc9\x4e\xe1\xa2\x30\xfd\x94\xa3\x2b\x9c\xc9\x4d\x7b\xf6\x2d\xa4\x0a\x3d\x64\x3a\xa7\xea\xca\x21\x00\x42\xf5\xf1\xd1\x6c\x17\x5c\x54\x0e\xe1\x4f\xb4\xb3\x42\x94\x0b\x2e\x67\xad\x90\x53\x47\x3a\xd2\x73\xca\xf5\x8e\x78\x65\xae\x79\x41\x22\xf2\x04\x1c\x7f\x14\xa3\x72\xb6\x42\xef\x4c\x15\xc0\xa5\x9c\x3c\x5c\xe9\xcd\x96\x99\xc7\x29\x4c\x88\xfc\x8e\xc8\x64\x72\x14\xc2\x3b\x60\xca\x0d\x01\xca\xf4\xe2\xd5\x57\x27\x5f\x7f\xbd\x35\x2e\x74\x1a\x58\x33\x2d\xc9\x9c\xd8\x9c\x62\xa8\x3f\xa3\x53\x36\x42\xfc\xd3\x56\x28\xa9\x30\x5d\xb9\x29\xca\x57\xfc\x5d\xc0\x64\xdf\x8d\x8d\x88\x25\x77\xb3\x14\x41\xec\xce\xed\x19\xc4\x9c\xec\x1e\xa2\xc3\xe7\x26\x8f\x0e\x06\x0f\xd9\x5d\xdd\x39\xd1\x7a\xcc\x6d\x02\xb9\x4b\xc9\x27\xb4\x5c\x1f\xf1\x77\xec\xf6\xf4\xe4\x7f\x4f\x06\xc6\xd6\x3b\x6e\x4d\xaa\x36\x5f\x61\x55\xc2\x48\x19\x1e\x94\x3d\x74\x7a\x7d\xf7\xc8\x3d\x87\x68\x80\xa9\x3a\x33\x1a\x34\x20\xb7\x57\x56\xda\x7c\xeb\xaa\x88\x43\xc7\x8f\x78\x06\x5f\xc0\x5d\x07\x87\x2d\xbd\xb7\xec\x96\x0e\x92\x0d\xdd\x0a\x7f\xa6\xfb\x91\xe0\xc6\xc6\x85\x56\x2b\x9e\xa2\x36\x11\x44\x42\x2d\xb8\xf4\xff\xab\xd2\x86\x83\xbc\x9f\x46\x69\x0b\xcd\xf1\xa7\x87\xe8\xa0\xe6\xea\x12\xe2\x5f\x3a\xe8\xba\xc5\x48\x95\x4a\x94\x7a\xe0\x24\x32\x10\xe2\x77\xa4\x8c\xe4\xc4\x8e\x07\x07\xf4\xbf\x76\x92\xb8\x1f\xdd\x4e\x0c\xf9\xe4\xe4\x77\x40\xc2\xbb\xc2\xa3\x4b\x85\x6b\x45\xcf\x9c\x98\x3f\x93\xba\x83\xde\xa0\x52\x9c\xeb\x8a\xe2\xb8\x60\xc6\xb8\xbb\x95\x5e\x4b\x4c\x16\xdc\x6a\xd6\x7c\xc5\x2c\xc6\xd7\xb8\x69\x37\x7a\xa3\x69\x5a\x28\xc7\x24\xcf\x0e\x2d\x0f\x65\x1f\x43\xf9\xe5\x38\x64\xf0\xa6\x2c\x0a\xa5\xad\xcf\xa8\xeb\xe4\xab\x05\x96\x1b\xec\x5f\xcd\x6c\xe1\xf9\x0e\xfb\xf9\x2d\x2d\xf3\x53\x0d\x6a\xcb\x66\xb8\xb1\xb3\xda\x57\x3f\xaf\xf1\x54\xb6\x43\x7a\xfe\xbb\x51\xf2\xc1\xbc\xff\xbf\x57\xbb\x3d\x40\x50\xa5\x7d\x1c\xa5\x3e\xe9\xf2\xc1\x74\x99\x88\xd2\x58\xd4\x9f\x3f\x90\x33\x6b\x59\x92\x47\x10\x05\x37\x25\xb0\x88\x20\xd2\xb8\x54\x2b\x74\x5f\x08\x9a\x23\x88\x0c\xda\xb2\x78\x8a\xeb\xdb\xa4\xff\xf5\xb8\x1e\x54\x3f\xf3\x9a\x78\x2c\x4f\x6e\xba\xdc\xe1\x72\xba\x1f\xd4\xe9\xef\x92\xdf\xbd\xbd\x98\x4e\xf6\xfe\x26\xf7\xc0\xdd\x3c\xc6\x1a\x04\x97\x48\x29\x38\x54\xec\xbb\x69\xcf\xa6\xfb\xd1\x84\xba\x7c\x7e\x2e\x11\x5e\xc2\xcb\x7d\x62\xb7\x1a\x07\x64\x60\x10\xc7\xfe\x08\xfb\x55\xeb\xf4\xe6\x79\x68\xc8\xdc\x74\x28\xb7\x7e\x1e\xea\x26\xf9\x6f\xdd\x79\xbb\xa2\xee\xc9\xd2\x89\xfa\xdd\x6b\x4a\x4b\x87\xa8\x3c\xa1\xd6\x30\xe5\xfb\xd1\x6d\xc9\xf3\x0e\xba\xf7\xc0\x3e\x97\xa7\x3c\x5e\x76\xe2\xdd\x0f\xd3\xa7\x54\xe5\xb7\x0b\x6f\x33\x1f\x56\x1e\x51\xc9\x42\xb8\xff\x4b\x59\x17\x20\x3c\xa9\xf9\xb7\x50\x33\xa1\xc3\xbf\x77\x52\xfa\xbb\x13\xaa\x4b\xc0\x1e\x47\xa6\xae\x27\x8a\xe3\x84\xc5\x09\x6a\x6b\x9a\xb3\x3b\x97\x06\x93\x52\x63\xdd\xd0\x3a\xc8\xd3\x5f\x2a\x76\xf7\x62\xed\x06\x7f\x51\xf9\x74\x9b\xf0\xe8\xde\x7d\x5f\x3b\x54\x32\xe3\x8b\xcf\x7f\x42\x31\x48\x07\x12\x93\xab\x75\x04\x51\x29\xe9\xcf\xa7\x53\x08\x3c\xf8\x29\xc4\x69\x97\x40\xe6\x09\xb6\x07\xf5\x76\x6f\xd8\x0e\x02\xcd\xd5\xfa\x49\xa2\x0f\x29\x51\x07\x01\x4f\x22\x7d\x10\x91\xfa\x58\xfc\x08\xb7\x4e\x69\xda\xbb\x6b\x7a\x02\x75\x78\x68\x50\x0f\x3f\x2a\xb3\x34\x7d\xbc\x23\x57\x59\xa4\xcc\x3e\xdc\x29\xeb\x77\xe6\x3a\x8f\x7c\x69\xf1\xa0\xf7\x14\xbf\x37\xd1\x3e\xe6\x65\xc1\x7f\x9a\x4c\xfb\x52\x9c\x9e\x7e\x06\x98\x2f\x6d\x1e\x41\x14\x4e\xb0\xf4\xcd\x85\xf0\xe6\xd7\x86\x70\x16\xbc\x03\xfa\xc9\xca\xc3\x43\x90\x4a\x29\x7e\x5c\x53\x30\x13\x56\x3b\xe8\xf2\x10\xce\x5e\xb3\x94\xeb\x7b\xdc\x66\x6f\x51\xbd\xe3\x3e\x3b\xd4\xdb\x84\xeb\xec\xba\x34\xab\x7f\xa3\xdd\xa1\x75\xb3\xb5\xc0\xaf\x5c\x6b\x87\x45\xaa\xd1\xee\x42\x7b\x88\xc2\xa7\xde\xd5\x77\xc5\x72\x9f\xdd\x85\x79\x31\xcd\x1b\xd8\x64\x97\xf9\x9f\x6a\xb6\xb7\x8b\x8f\x38\x86\x5b\xf9\x2e\x27\x8d\xd1\xff\x5a\x55\xd4\xce\xc9\x6e\xf6\x18\xa4\x6a\x97\xd5\x55\xf5\x83\x7e\x02\x02\x72\x57\xb5\xea\x6c\x0c\x94\x6e\x17\x36\x3e\x8c\xbf\x0f\x5f\x13\xf8\x22\xcf\x81\xcb\x82\x96\x84\x34\x5f\xe4\x16\xa4\x5a\x0f\xcc\x77\x85\x43\xae\xf2\x4c\x20\x5b\xa1\x2b\x4e\x76\x05\xe6\xca\xa2\xb4\x9c\xbc\x46\x69\x48\xd1\x62\x62\x5d\xb9\x95\xdb\x9f\xab\x41\xb2\xec\x1a\x61\xc5\x44\x89\x06\xe6\xa5\x75\xc5\x9e\x06\x0b\xa6\x5d\x75\xa4\xe0\xd7\xfd\x52\xa4\x31\xc4\xb1\xe3\xce\x4d\x03\x2e\x8d\x25\x43\x72\xcf\x3f\xa8\x7d\xea\xda\x07\xa6\xad\x71\x4f\xa3\x2b\x8e\x5b\x2b\xad\x37\x4d\x11\x58\x75\x31\xb2\x75\x27\x02\x36\x77\xc5\xf3\x46\x01\xb7\x7b\x06\x0c\xcb\x10\xac\x02\xbe\x90\x2a\x3c\x1d\xe9\xad\xf2\x69\xd7\x26\x04\x1d\x7d\x45\x3c\xfe\x95\xcb\x80\xd0\xa4\xea\x57\xbc\x92\x44\x9c\xeb\x91\xf0\x0a\x65\x0c\x9f\x0b\xec\x19\x6b\x97\x0e\x97\xe4\xef\x02\x4a\xc3\x16\x78\xd4\xbc\x98\x09\x8f\x08\x8c\x72\xcf\x6f\xca\x22\xbc\x51\x69\x3f\x58\x08\x8b\x5a\xd5\xae\xde\x3d\x72\x8a\x34\xa5\xc6\xc1\xeb\xab\x31\xe4\x6a\x0d\x6b\x84\x35\x93\x96\xa6\x7a\xd1\x0c\x2b\xed\xd1\xb3\xe1\xe6\x71\xcd\x8e\xf7\x03\x93\x6f\x6a\x04\xd9\x51\xf0\xf8\x3f\x5f\x87\xfe\xd0\x08\xa5\x2c\x0d\xb6\x5e\x24\x85\xd2\xbf\x23\xf7\x90\x0e\xb8\xa9\x06\xd4\xef\x5a\x42\x68\x2a\xb5\x1f\xe1\x1e\xde\xf8\x57\x6a\x9d\x52\xd8\xb0\x0c\xe9\xa4\xd3\xee\x94\xa3\x95\xb2\x34\x3d\xe3\x1f\x3d\xcd\x76\x0d\x6d\xe4\xb6\x14\x36\x52\xd7\xba\xd7\xc1\x6f\xbc\x55\xbb\xdd\x7d\xe5\x34\x67\x26\x6f\x01\x3d\x14\x2c\xb9\x66\x0b\x0c\xcf\x0a\xde\xc1\x1c\x05\xc7\x15\xc2\xb2\x34\x36\x90\x9b\x7b\x70\x60\x42\x60\x5a\x83\x8a\xd8\xf8\x12\x4b\xf7\x2a\xd8\x09\x7a\xf8\x0d\x65\x2c\x21\x9a\x9e\x45\x83\xf2\x18\x0d\x68\xe8\xc2\x32\x6d\xbb\xc5\x9c\xa0\x24\xec\x11\x12\xef\x85\xaa\xce\xf0\x98\xe9\xb0\x8e\x07\x8e\x02\x59\x40\x1d\x01\x62\xe5\x38\x0b\x19\x0e\xfd\xd9\xfa\x2a\x95\x7f\x15\x11\xbf\xed\xbc\xc7\x72\x44\xfe\x19\x00\x00\xff\xff\xdd\x90\x86\x86\xed\x3c\x00\x00")

func completionShBytes() ([]byte, error) {
	return bindataRead(
		_completionSh,
		"completion.sh",
	)
}

func completionSh() (*asset, error) {
	bytes, err := completionShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "completion.sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"completion.sh": completionSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"completion.sh": &bintree{completionSh, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

